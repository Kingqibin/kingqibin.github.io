<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Django服务器与App(Android)客户端的简单实现</title>
    <link href="/2022/04/19/Django%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8EApp-Android-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/04/19/Django%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8EApp-Android-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作者是一个技术小白，这也是本人的第一篇文章，虽然网上关于Django和Android结合搭建app的文章很多，但是还是想要根据自己在搭建过程中遇到的问题写一篇学习笔记，同时也供他人借鉴一下。<br>说明：本示例app为本人实现 的一个很简单的记账软件，不喜勿喷。<br>附github地址：<a href="https://github.com/Kingqibin/PayKeep_Online">https://github.com/Kingqibin/PayKeep_Online</a></p></blockquote><h1 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h1><p><strong>环境要求：</strong></p><ol><li>Ubuntu 16.04 LTS 桌面版&#x2F;服务器版</li><li>Python 3</li><li>pip等</li></ol><p><strong>代码实现</strong></p><ol><li>安装Django:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">pip install django<br></code></pre></td></tr></table></figure><ol start="2"><li>创建django项目：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs linux">django-admin startproject paykeep # 创建项目<br>django-admin startapp paykeep_service # 主要的服务内容<br></code></pre></td></tr></table></figure><p>startproject命令主要的作用是开启了一个项目的成熟框架，在之后的操作中只需要修改一下里面的参数。<br>startapp命令主要的功能是创建实现功能的模板。<br><strong>以下在搭建时主要就是修改paykeep和paykeep_service文件夹下的主要内容。</strong><br><img src="https://img-blog.csdnimg.cn/20190601202601396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzY1MTk5,size_20,color_FFFFFF,t_70" alt="paykeep的目录文件"><br><img src="https://img-blog.csdnimg.cn/20190601202444924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzY1MTk5,size_20,color_FFFFFF,t_70" alt="paykeep_service下的文件目录结构"></p><ol start="3"><li>修改paykeep_service下的内容：</li></ol><p>（1）修改app.py的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PaykeepServiceConfig</span>(<span class="hljs-title class_ inherited__">AppConfig</span>):<br>    name = <span class="hljs-string">&#x27;paykeep_service&#x27;</span>   <span class="hljs-comment">#修改name为你项目的名称</span><br></code></pre></td></tr></table></figure><p>（2）修改model.py的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-comment"># 以下定义自己的类模型，以及相对应的数据段</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pay</span>(models.Model):<br>    <span class="hljs-built_in">id</span> = models.IntegerField(null=<span class="hljs-literal">False</span>, primary_key=<span class="hljs-literal">True</span>)<br>    item_spend = models.CharField(null=<span class="hljs-literal">False</span>, max_length=<span class="hljs-number">50</span>)<br>    money = models.FloatField(null=<span class="hljs-literal">False</span>)<br>    year = models.IntegerField(null=<span class="hljs-literal">False</span>)<br>    month = models.IntegerField(null=<span class="hljs-literal">False</span>)<br>    day = models.IntegerField(null=<span class="hljs-literal">False</span>)<br>    isPri = models.BooleanField(null=<span class="hljs-literal">False</span>)<br>    data_added = models.DateTimeField(auto_now_add=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 以下的函数的作用是在展示 调试时显示相应的数据内容，可以自行配置</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        temp = <span class="hljs-string">&quot;id is : &quot;</span> + <span class="hljs-built_in">str</span>(self.<span class="hljs-built_in">id</span>) + <span class="hljs-string">&quot;--item is : &quot;</span> + <span class="hljs-built_in">str</span>(self.item_spend)<br>        <span class="hljs-keyword">return</span> temp<br></code></pre></td></tr></table></figure><p>关于更多的类型数据定义可以自行google相关的django API。</p><p>（3）修改最重要的view.py的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Pay <span class="hljs-comment">#！！！</span><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-comment">#！！！</span><br><span class="hljs-keyword">from</span> django.core.exceptions <span class="hljs-keyword">import</span> ObjectDoesNotExist<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">request</span>):<br><span class="hljs-comment"># 解析请求方式：</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        item_spend = request.POST.get(<span class="hljs-string">&#x27;item_spend&#x27;</span>)<br>        <span class="hljs-built_in">id</span> = request.POST.get(<span class="hljs-string">&#x27;id&#x27;</span>)<br>        money = request.POST.get(<span class="hljs-string">&#x27;money&#x27;</span>)<br>        year = request.POST.get(<span class="hljs-string">&#x27;year&#x27;</span>)<br>        month = request.POST.get(<span class="hljs-string">&#x27;month&#x27;</span>)<br>        day = request.POST.get(<span class="hljs-string">&#x27;day&#x27;</span>)<br>        isPri = request.POST.get(<span class="hljs-string">&#x27;isPri&#x27;</span>)<br>        fun = request.POST.get(<span class="hljs-string">&#x27;fun&#x27;</span>)<br>        <span class="hljs-comment"># 功能解析</span><br>        <span class="hljs-keyword">if</span> fun == <span class="hljs-string">&#x27;1&#x27;</span>:<br>            Pay.objects.create(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>, item_spend=item_spend, money=money, year=year, month=month, day=day, isPri=isPri)<br>            <span class="hljs-keyword">try</span>:<br>                t = Pay.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br>                <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;add_ok&quot;</span>)<br>            <span class="hljs-keyword">except</span> ObjectDoesNotExist:<br>                <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;add_error&quot;</span>)<br>        <span class="hljs-keyword">elif</span> fun == <span class="hljs-string">&#x27;2&#x27;</span>:<br>            <span class="hljs-keyword">try</span>:<br>                temp = Pay.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-built_in">id</span>)<br>                temp.delete()<br>                <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;delete_ok&quot;</span>)<br>            <span class="hljs-keyword">except</span> ObjectDoesNotExist:<br>                <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;not_found&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<span class="hljs-comment">#注意代码对齐</span><br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;error&quot;</span>)<br></code></pre></td></tr></table></figure><p>以上为本程序实现所需要的核心代码部分，其中我在使用时的django请求方式好像只能用get和post（因为我在网络方面也是小白，具体的咱也不是太清楚，感兴趣的同学可以详细研究下，看其它地博主好像可以用）。因此使用了一个比较蠢的功能解析（即传fun字段来判断要执行哪一个功能）的方式来实现。<br>另外在网络响应时使用的是HttpResponse具体的其它功能读者可以自行google API。</p><ol start="4"><li>修改paykeep下的内容：</li></ol><p>（1）修改setting.py的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">···<br>DEBUG = <span class="hljs-literal">False</span><br>ALLOWED_HOSTS = [<span class="hljs-string">&#x27;*&#x27;</span>] <span class="hljs-comment"># 可访问的ip</span><br>···<br>INSTALLED_APPS = [<br>    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br>    <span class="hljs-string">&#x27;paykeep_service&#x27;</span>, <span class="hljs-comment"># 项目名字</span><br>]<br><br>MIDDLEWARE = [<br>    <span class="hljs-string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,<br><span class="hljs-comment">#    &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;, # 注释掉</span><br>    <span class="hljs-string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,<br>    <span class="hljs-string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><p>应该只需要做以上的修改就好，具体的可以参考github的源码。</p><p>（2）修改重要的urls.py的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> paykeep_service.views <span class="hljs-keyword">import</span> pay<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&#x27;add_pay/&#x27;</span>, pay),<span class="hljs-comment"># ！！！！！！！！！！！！！！！！</span><br>]<br></code></pre></td></tr></table></figure><p>这里的 add_pay&#x2F; 为请求方式，pay 为在view.py中定义的方式名，这里一定要对应。如果在view中写了更多的请求功能调用也可以在这里一一列明。</p><ol start="5"><li>初始化一下数据库：<br>使用manage.py文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python manage.py migrate<br></code></pre></td></tr></table></figure><ol start="6"><li>运行:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python manage.py runserver 0.0.0.0:10000<br></code></pre></td></tr></table></figure><p>允许接入的ip地址（0.0.0.0）表示允许所有的ip接入，10000端口表示开放的端口。如果使用的是云服务器，一定要在安全组里面配置一下哟。</p><hr><p>目前为止，关于后台的搭建已经基本完成，因为我对于后台的了解也不是太多，所以讲的一些东西可能会不太准确，但是操作基本都是正确的。另外推荐大家在搭建好后台后使用postman进行一下响应的测试，看看传入响应的数据后是否会产生预期的效果，如果没用可能需要改一下代码了。防止在后面搭建完app后再反过头来修改后台，浪费时间。本人在写后台时也是经过了很长时间的调试才达到最后的效果，大家要保持耐心哟~提醒一下，如果模型更改了就要按照第5部重新部署一下数据库文件。</p><hr><h1 id="APP的构建（Android）"><a href="#APP的构建（Android）" class="headerlink" title="APP的构建（Android）"></a>APP的构建（Android）</h1><p>在这里假设大家对一些基础的android操作都已经很熟悉了，因此只是写一些与网络通信的介绍，其它的可以去github参照下源代码。按照国际惯例先贴代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加支出记录：</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPay</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Pay pay,<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> n)</span>&#123;<br> <span class="hljs-comment">//开启网络传输线程------这里可以使用rxjava等热门的框架代替，这里从简</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">//okhttp 客户端</span><br>                <span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>();<br>                <span class="hljs-comment">//请求体----添加你需要上传的字段</span><br>                <span class="hljs-type">RequestBody</span> <span class="hljs-variable">requestBody</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormBody</span>.Builder()<br>                        .add(<span class="hljs-string">&quot;id&quot;</span>,String.valueOf(pay.getId()))<br>                        .add(<span class="hljs-string">&quot;item_spend&quot;</span>,pay.getName())<br>                        .add(<span class="hljs-string">&quot;money&quot;</span>,String.valueOf(pay.getMoney()))<br>                        .add(<span class="hljs-string">&quot;year&quot;</span>,String.valueOf(pay.getYear()))<br>                        .add(<span class="hljs-string">&quot;month&quot;</span>,String.valueOf(pay.getMonth()))<br>                        .add(<span class="hljs-string">&quot;day&quot;</span>,String.valueOf(pay.getDay()))<br>                        .add(<span class="hljs-string">&quot;isPri&quot;</span>,pay.isPrivate()?<span class="hljs-string">&quot;True&quot;</span>:<span class="hljs-string">&quot;False&quot;</span>)<br>                        .add(<span class="hljs-string">&quot;fun&quot;</span>,String.valueOf(<span class="hljs-number">1</span>))<br>                        .build();<br>                <span class="hljs-comment">// 请求构建  添加你自己的ip地址   另外 请求方式 add_pay 要与urls.py中定义的相同</span><br>                <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>                        .url(<span class="hljs-string">&quot;http://&quot;</span>+ip+<span class="hljs-string">&quot;/add_pay/&quot;</span>)<br>                        .post(requestBody)<br>                        .build();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.newCall(request).execute();<br>                    <span class="hljs-comment">//请求处理</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">rd</span> <span class="hljs-operator">=</span> response.body().string();<br>                    Log.d(TAG, <span class="hljs-string">&quot;get response : &quot;</span>+rd);<br>                    <span class="hljs-keyword">if</span> (rd.isEmpty())&#123;<br>                        runOnUiThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                                <span class="hljs-keyword">if</span> (n==<span class="hljs-number">1</span>)<br>                                    Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;啊咧咧~下次再上传~&quot;</span>,Toast.LENGTH_SHORT).show();<br>                            &#125;<br>                        &#125;);<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (rd.equals(<span class="hljs-string">&quot;add_ok&quot;</span>))&#123;<br>                            runOnUiThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                                <span class="hljs-meta">@Override</span><br>                                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                                    pay.setUploaded(<span class="hljs-literal">true</span>);<br>                                    pay.save();<br>                                    refreshSum();<br>                                    <span class="hljs-keyword">if</span> (n==<span class="hljs-number">1</span>)<br>                                        Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;添加成功&quot;</span>,Toast.LENGTH_SHORT).show();<br>                                &#125;<br>                            &#125;);<br>                        &#125;<span class="hljs-keyword">else</span> &#123;<br>                            runOnUiThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                                <span class="hljs-meta">@Override</span><br>                                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                                    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>                                        Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;添加失败&quot;</span>,Toast.LENGTH_SHORT).show();<br>                                &#125;<br>                            &#125;);<br>                        &#125;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                    runOnUiThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                            <span class="hljs-keyword">if</span> (n==<span class="hljs-number">1</span>)<br>                                Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;啊咧咧~下次再上传~&quot;</span>,Toast.LENGTH_SHORT).show();<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br><span class="hljs-comment">// 删除消费记录 几乎跟上面相同</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deletePay</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Pay pay,<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> pos)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OkHttpClient</span>();<br>                <span class="hljs-type">RequestBody</span> <span class="hljs-variable">requestBody</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormBody</span>.Builder()<br>                        .add(<span class="hljs-string">&quot;id&quot;</span>,String.valueOf(pay.getId()))<br>                        .add(<span class="hljs-string">&quot;item_spend&quot;</span>,pay.getName())<br>                        .add(<span class="hljs-string">&quot;money&quot;</span>,String.valueOf(pay.getMoney()))<br>                        .add(<span class="hljs-string">&quot;year&quot;</span>,String.valueOf(pay.getYear()))<br>                        .add(<span class="hljs-string">&quot;month&quot;</span>,String.valueOf(pay.getMonth()))<br>                        .add(<span class="hljs-string">&quot;day&quot;</span>,String.valueOf(pay.getDay()))<br>                        .add(<span class="hljs-string">&quot;isPri&quot;</span>,pay.isPrivate()?<span class="hljs-string">&quot;True&quot;</span>:<span class="hljs-string">&quot;False&quot;</span>)<br>                        .add(<span class="hljs-string">&quot;fun&quot;</span>,String.valueOf(<span class="hljs-number">2</span>))<br>                        .build();<br>                <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>.Builder()<br>                        .url(<span class="hljs-string">&quot;http://&quot;</span>+ip+<span class="hljs-string">&quot;/add_pay/&quot;</span>)<br>                        .post(requestBody)<br>                        .build();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> client.newCall(request).execute();<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">rd</span> <span class="hljs-operator">=</span> response.body().string();<br>                    Log.d(TAG, <span class="hljs-string">&quot;get response : &quot;</span>+rd);<br>                    <span class="hljs-keyword">if</span> (rd.isEmpty())&#123;<br>                        runOnUiThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                            <span class="hljs-meta">@Override</span><br>                            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                                Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;啊咧咧~电波无法到达~&quot;</span>,Toast.LENGTH_SHORT).show();<br>                            &#125;<br>                        &#125;);<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (rd.equals(<span class="hljs-string">&quot;delete_ok&quot;</span>))&#123;<br>                            runOnUiThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                                <span class="hljs-meta">@Override</span><br>                                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                                    pays.remove(pos);<br>                                    adapter.notifyItemRemoved(pos);<br>                                    recyclerView.scrollToPosition(pos);<br>                                    LitePal.delete(Pay.class,pay.getId());<br>                                    refreshSum();<br>                                    Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;消除成功&quot;</span>,Toast.LENGTH_SHORT).show();<br>                                &#125;<br>                            &#125;);<br>                        &#125;<span class="hljs-keyword">else</span> &#123;<br>                            runOnUiThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                                <span class="hljs-meta">@Override</span><br>                                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                                    Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;消除失败&quot;</span>,Toast.LENGTH_SHORT).show();<br>                                &#125;<br>                            &#125;);<br>                        &#125;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                    runOnUiThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                            Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;啊咧咧~电波无法到达~&quot;</span>,Toast.LENGTH_SHORT).show();<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>    &#125;<br></code></pre></td></tr></table></figure><p>其它的一些安卓代码，大家有兴趣的话参见github，我在这里就只放核心了，如有问题可在评论区留言。</p><hr><p>目前为止项目基本就结束了！因为写文章时离项目完成有一段时间了，所以大家如果觉得我写的有问题，不清楚的地方都可以在评论区留言，我及时修改<del>（只要我看地到-哈哈牛逼地叉会儿腰）</del></p><blockquote><p>转载请声明出处，谢谢</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MITJOS Lab2中关于boot_alloc初始化问题引发的memset问题</title>
    <link href="/2022/04/19/MITJOS-Lab2%E4%B8%AD%E5%85%B3%E4%BA%8Eboot-alloc%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84memset%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/19/MITJOS-Lab2%E4%B8%AD%E5%85%B3%E4%BA%8Eboot-alloc%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84memset%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<blockquote><p>问题的发现是本人在进行lab3实验时，有memset失败而进一步探索的结果，如果你的lab2成功pass，不代表不会存在以下问题，另外，与你的狗屎运也有点儿关系。<br>背景：lab3中的env.c文件已经填完了，发现boot_alloc存在问题，以下代码展示均在branch lab3下进行。</p></blockquote><p>上案发现场：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// This simple physical memory allocator is used only while JOS is setting</span><br><span class="hljs-comment">// up its virtual memory system.  page_alloc() is the real allocator.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// If n&gt;0, allocates enough pages of contiguous physical memory to hold &#x27;n&#x27;</span><br><span class="hljs-comment">// bytes.  Doesn&#x27;t initialize the memory.  Returns a kernel virtual address.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// If n==0, returns the address of the next free page without allocating</span><br><span class="hljs-comment">// anything.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// If we&#x27;re out of memory, boot_alloc should panic.</span><br><span class="hljs-comment">// This function may ONLY be used during initialization,</span><br><span class="hljs-comment">// before the page_free_list list has been set up.</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<br><span class="hljs-title function_">boot_alloc</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> n)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> *nextfree;<span class="hljs-comment">// virtual address of next byte of free memory</span><br><span class="hljs-type">char</span> *result;<br><br><span class="hljs-comment">// Initialize nextfree if this is the first time.</span><br><span class="hljs-comment">// &#x27;end&#x27; is a magic symbol automatically generated by the linker,</span><br><span class="hljs-comment">// which points to the end of the kernel&#x27;s bss segment:</span><br><span class="hljs-comment">// the first virtual address that the linker did *not* assign</span><br><span class="hljs-comment">// to any kernel code or global variables.</span><br><span class="hljs-keyword">if</span> (!nextfree) &#123;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> end[];<br>nextfree = ROUNDUP((<span class="hljs-type">char</span> *) end, PGSIZE);<br>&#125;<br><br><span class="hljs-comment">// Allocate a chunk large enough to hold &#x27;n&#x27; bytes, then update</span><br><span class="hljs-comment">// nextfree.  Make sure nextfree is kept aligned</span><br><span class="hljs-comment">// to a multiple of PGSIZE.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// LAB 2: Your code here.</span><br>result = nextfree;<br><span class="hljs-comment">// be kept aligned to a multiple of PGSIZE</span><br>nextfree = ROUNDUP(nextfree + n, PGSIZE);<br><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span>)nextfree - KERNBASE &gt; (npages * PGSIZE)) <span class="hljs-comment">// npages * PGSIZE = totalmem</span><br>&#123;<span class="hljs-comment">// since npages count from KERNBASE then when compare it should use KERNBASE</span><br>panic(<span class="hljs-string">&quot;out of memory in boot_alloc\n&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>命案现场并不是让我们自己填写的部分，而是系统默认给出的这一部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Initialize nextfree if this is the first time.</span><br><span class="hljs-comment">// &#x27;end&#x27; is a magic symbol automatically generated by the linker,</span><br><span class="hljs-comment">// which points to the end of the kernel&#x27;s bss segment:</span><br><span class="hljs-comment">// the first virtual address that the linker did *not* assign</span><br><span class="hljs-comment">// to any kernel code or global variables.</span><br><span class="hljs-keyword">if</span> (!nextfree) &#123;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> end[];<br>nextfree = ROUNDUP((<span class="hljs-type">char</span> *) end, PGSIZE);<br>&#125;<br></code></pre></td></tr></table></figure><p>首先分析它这一部分注释的问题，它说end变量是bss段中对后一个变量，如果它说的是正确的，那么我们可以使用end作为bss段的末尾，同时在roundup的作用下可以保证nextfree是绝对在bss段后面，而且是可以对4K取整的。<br>但是问题是，它说的“end是bss段的末尾”是不是正确的呢？那就瞅一瞅。<br>首先，查看下ELF中对各个段的定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">objdump -h obj/kern/kernel<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020030823111179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzY1MTk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>上面是我的结果，先不用管具体的虚拟地址（我的是在lab3下，可能因人而异），看到bss段的虚拟地址是0xf0182100，段的大小为0xf14，那么计算下可知bss的范围为[0xf0182100, 0xf0183014) ，之后呢，我们使用gdb看一下，这个end的具体地址：<br>在mem_init中，第一次调用boot_alloc是在开辟页目录内存的位置，也就是下面的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">kern_pgdir = (<span class="hljs-type">pde_t</span> *) boot_alloc(PGSIZE);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200308232211920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzY1MTk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们使用gdb跳转到上面代码的位置，然后进入boot_alloc的体内，再调到if判断的地方，si进入，可以明显的看到，end的地址是0xf0183000。<br><img src="https://img-blog.csdnimg.cn/20200308232045292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzY1MTk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这时候有人会觉得，哎，这不是很正常吗，end是一个数组，所以后面还有20个元素？那继续往后看：<br>通过查阅代码我们可以知道，kern_pgdir也是一个全局变量，而且也没有进行初始化，那么他一定是在bss段中的。<br>在第一次boot_alloc处作一下更改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">// create initial page directory. !!!!!!!!!!!!!</span><br>kern_pgdir = (<span class="hljs-type">pde_t</span> *) boot_alloc(PGSIZE);<br>cprintf(<span class="hljs-string">&quot;%x\n&quot;</span>, &amp;kern_pgdir);<br><span class="hljs-built_in">memset</span>(kern_pgdir, <span class="hljs-number">0</span>, PGSIZE);<br></code></pre></td></tr></table></figure><p>打印下信息<br>看结果：<br><img src="https://img-blog.csdnimg.cn/2020030823313780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzY1MTk5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>没错，你没有看错，kern_pgdir所在的内存地址为0xf018300c。进一步验证下，使用以下的命令来查看全部表头信息：（这里输出到文件，好定位）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">objdump -x obj/kern/kernel  &gt; ~/work/test<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200308233459137.png" alt="在这里插入图片描述"><br>除了kern_pgdir外，还有好多变量都是在end之后的，比如panicstr、npages。<br>然后说一下，这样就会导致一个什么样的问题：<br>以我遇到的问题为例，我的end所在的地址为0xf0183000，因此我通过</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">nextfree = ROUNDUP((<span class="hljs-type">char</span> *) end, PGSIZE);<br></code></pre></td></tr></table></figure><p>获取到的result（也就是kern_pgdir）的值为0xf0183000（jtm离谱），也就是说kern_pgdir（0xf018300c）所指向的地址为0xf0183000，在之后的memset中，显然，会将期自身清空，导致，memset运行完后，kern_pgdir自身的值为0了，导致了后面一系列的错误。<br>进一步分析可知，原文中说的magic，其实一点儿都不magic，而是存在一定的问题，但是我觉得这个可能也跟编译器的编译顺序有关吧，就没有再深入的研究下，如果kern_pgdir等变量的存放地址在end之前的话就不会存在这个问题，或者说，如果你的end经过roundup之后，与nextfree之间有很大的gap，足以保存下其余的变量的话，也不会出现问题，当然这与你的运气有关。<br>明白了之后，直接上简单粗暴的解决方案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Initialize nextfree if this is the first time.</span><br><span class="hljs-comment">// &#x27;end&#x27; is a magic symbol automatically generated by the linker,</span><br><span class="hljs-comment">// which points to the end of the kernel&#x27;s bss segment:</span><br><span class="hljs-comment">// the first virtual address that the linker did *not* assign</span><br><span class="hljs-comment">// to any kernel code or global variables.</span><br><span class="hljs-keyword">if</span> (!nextfree) &#123;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> end[];<br>nextfree = ROUNDUP((<span class="hljs-type">char</span> *) end, PGSIZE) + PGSIZE;<br>&#125;<br></code></pre></td></tr></table></figure><p>即nextfree在初始化的时候加上个PGSIZE，虽然这样不会根治这个问题，当end后面的变量继续边多，直到后面变量占用的内存达到了4K，那么这里还是会出错。但是就目前而言，是足够了吧。如果有更好的解决方案欢迎在评论取留言，希望我的经验能够对看到这里的你有一点帮助。</p><hr><p>如有错误，欢迎指正。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于我想在windows上编译colmap这件事</title>
    <link href="/2022/04/19/%E5%85%B3%E4%BA%8E%E6%88%91%E6%83%B3%E5%9C%A8windows%E4%B8%8A%E7%BC%96%E8%AF%91colmap%E8%BF%99%E4%BB%B6%E4%BA%8B/"/>
    <url>/2022/04/19/%E5%85%B3%E4%BA%8E%E6%88%91%E6%83%B3%E5%9C%A8windows%E4%B8%8A%E7%BC%96%E8%AF%91colmap%E8%BF%99%E4%BB%B6%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前几天尝试在windows上编译colmap，途中遇到了很多的问题，在这里记录以下，方便以后参考，以下内容仅供参考，如有错误欢迎指正，也欢迎大家有问题在评论区讨论。</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>windows10 专业版20H2<br>cuda 10.0<br>VS2015<br>QT 5.9.3<br>cmake 3.18.5<br>另外可能需要git、7z等软件</p><h2 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h2><p>大体的编译流程如下，先手动编译Boost（也可以现在编译好的），之后编译CGAL，最后编译colmap，其中编译colmap才是遇到坑最多的地方</p><h2 id="编译Boost"><a href="#编译Boost" class="headerlink" title="编译Boost"></a>编译Boost</h2><p>1.去官网下载一个Boost版本，最好不要太新，不然可能出问题（直觉），这里我用的是<a href="https://dl.bintray.com/boostorg/release/1.66.0/source/boost_1_66_0.7z">1.66.0</a>版本</p><ol start="2"><li>解压后执行booststrap.bat脚本，之后会生成b2.exe和bjam.exe两个可执行文件，在编译时只用到了b2.exe</li><li>在这篇<a href="https://zhuanlan.zhihu.com/p/85806857">文章</a>的帮助下可以对Boost的编译有更进一步的了解，这里本人在执行时使用的参数如下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">b2.exe install --toolset=msvc-14.0 --prefix=<span class="hljs-string">&quot;E:\3DAbout\ThirdParty\boost_1_66_0\msvc-140_64&quot;</span> <span class="hljs-built_in">link</span>=static runtime-link=shared threading=multi architecture=x86 address-model=64 debug release<br></code></pre></td></tr></table></figure><p>因为本人使用的时VS2015因此对应的toolset是msvc-14.0，其它版本的对应关系可以参考这篇<a href="https://blog.csdn.net/tanmx219/article/details/100824775">文章</a>，这里prefix指定存放编译后文件的目录<br>4.经过漫长的等待就可以看到在prefix指定的目录下生成了include和lib库<br>至此Boost编译完成，为了后面表述方便用<boost_path> 指代prefix所指定的目录</p><h2 id="编译CGAL"><a href="#编译CGAL" class="headerlink" title="编译CGAL"></a>编译CGAL</h2><p>1.去官网下载一个CGAL安装文件，这里实际上下载的是源码，安装完成后还是需要自己使用cmake进行编译，编译完成后将编译好的文件复制一份保留之后将cgal卸载即可，这里下载<a href="https://github.com/CGAL/cgal/releases/download/releases/CGAL-4.14.3/CGAL-4.14.3-Setup.exe">4.14.3</a>版本<br>2.之后使用cmake进行编译，configure时最好用64为哦，后面只需要指定Boost_DIR和Boost_INCLUDE_DIR，前者是<boost_path>，后者是<boost_path>\include\boost-1_66，之后configure，generate<br>3.在build文件夹下找到CGAL.sln，打开编译生成对应的版本即可（Release版本必须有哦）</p><h2 id="编译colmap"><a href="#编译colmap" class="headerlink" title="编译colmap"></a>编译colmap</h2><p>1.从github上下载colmap，这里下载的是<a href="https://github.com/colmap/colmap/archive/3.5.zip">3.5</a>版本（同样不是最新版）<br>2.这里咱们使用scripts目录下的build.py脚本进行编译安装，但是你直接使用的话会存在网络连接错误等问题，emmm，具体原因有一个是eigen那个库好像删了？然后其它的话也是下载的巨慢，因此采用的方法是咱们自己把库下载下来，扔进去就好了，可以去刚才的那个网盘下载。<br>3.在colmap根目录下创建一个build文件夹（这里可以自定义，后面在编译时能找到就好），将刚才网盘里的“colmap编译需要的第三方库.zip”中所有的库在build目录下解压，解压时最好选“在当前目录解压”哦，之后将所有的文件夹重命名如下<br><img src="https://img-blog.csdnimg.cn/20201201203150871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzY1MTk5,size_16,color_FFFFFF,t_70" alt="第三方库名称"><br>图中的colmap目录可以先不管<br>4.之后修改scripts\build.py文件，大体的意思就是将所有需要下载以及重命名的地方注释掉，直接用咱们自己下载的库，我在网盘里提供的库与colmap3.5所需要的库相对应，如果你装其它版本的colmap就下载它所指定的版本，去官网或者github上下载就好了，没啥难的，说明下build_cmake_project函数会在第三方库下面创建__build__目录用于保存编译后的结果，需要调用cmake，因此你需要确保path里加了cmake。下面提供我对整个脚本的更改（只列出了更改过的函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_eigen</span>(<span class="hljs-params">args</span>):<br>    path = os.path.join(args.build_path, <span class="hljs-string">&quot;eigen&quot;</span>)<br>    <span class="hljs-comment"># if os.path.exists(path):</span><br>        <span class="hljs-comment"># return</span><br><br>    <span class="hljs-comment"># url = &quot;https://bitbucket.org/eigen/eigen/get/3.3.4.zip&quot;</span><br>    <span class="hljs-comment"># archive_path = os.path.join(args.download_path, &quot;eigen-3.3.4.zip&quot;)</span><br>    <span class="hljs-comment"># download_zipfile(url, archive_path, args.build_path,</span><br>                     <span class="hljs-comment"># &quot;e337acc279874bc6a56da4d973a723fb&quot;)</span><br>    <span class="hljs-comment"># shutil.move(glob.glob(os.path.join(args.build_path, &quot;eigen-*&quot;))[0], path)</span><br><br>    build_cmake_project(args, os.path.join(path, <span class="hljs-string">&quot;__build__&quot;</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_freeimage</span>(<span class="hljs-params">args</span>):<br>    path = os.path.join(args.build_path, <span class="hljs-string">&quot;freeimage&quot;</span>)<br>    <span class="hljs-comment"># if os.path.exists(path):</span><br>        <span class="hljs-comment"># return</span><br><br>    <span class="hljs-keyword">if</span> PLATFORM_IS_WINDOWS:<br>        <span class="hljs-comment"># url = &quot;https://kent.dl.sourceforge.net/project/freeimage/&quot; \</span><br>              <span class="hljs-comment"># &quot;Binary%20Distribution/3.17.0/FreeImage3170Win32Win64.zip&quot;</span><br>        <span class="hljs-comment"># archive_path = os.path.join(args.download_path, &quot;freeimage-3.17.0.zip&quot;)</span><br>        <span class="hljs-comment"># download_zipfile(url, archive_path, args.build_path,</span><br>                         <span class="hljs-comment"># &quot;a7e6f2f261e72260ec5b91c2a0f4bde3&quot;)</span><br>        <span class="hljs-comment"># shutil.move(os.path.join(args.build_path, &quot;FreeImage&quot;), path)</span><br>        copy_file_if_not_exists(<br>            os.path.join(path, <span class="hljs-string">&quot;Dist/x64/FreeImage.h&quot;</span>),<br>            os.path.join(args.install_path, <span class="hljs-string">&quot;include/FreeImage.h&quot;</span>))<br>        copy_file_if_not_exists(<br>            os.path.join(path, <span class="hljs-string">&quot;Dist/x64/FreeImage.lib&quot;</span>),<br>            os.path.join(args.install_path, <span class="hljs-string">&quot;lib/FreeImage.lib&quot;</span>))<br>        copy_file_if_not_exists(<br>            os.path.join(path, <span class="hljs-string">&quot;Dist/x64/FreeImage.dll&quot;</span>),<br>            os.path.join(args.install_path, <span class="hljs-string">&quot;lib/FreeImage.dll&quot;</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># url = &quot;https://kent.dl.sourceforge.net/project/freeimage/&quot; \</span><br>              <span class="hljs-comment"># &quot;Source%20Distribution/3.17.0/FreeImage3170.zip&quot;</span><br>        <span class="hljs-comment"># archive_path = os.path.join(args.download_path, &quot;freeimage-3.17.0.zip&quot;)</span><br>        <span class="hljs-comment"># download_zipfile(url, archive_path, args.build_path,</span><br>                         <span class="hljs-comment"># &quot;459e15f0ec75d6efa3c7bd63277ead86&quot;)</span><br>        <span class="hljs-comment"># shutil.move(os.path.join(args.build_path, &quot;FreeImage&quot;), path)</span><br><br>        <span class="hljs-keyword">if</span> PLATFORM_IS_MAC:<br>            <span class="hljs-keyword">with</span> fileinput.FileInput(os.path.join(path, <span class="hljs-string">&quot;Makefile.gnu&quot;</span>),<br>                                     inplace=<span class="hljs-literal">True</span>, backup=<span class="hljs-string">&quot;.bak&quot;</span>) <span class="hljs-keyword">as</span> fid:<br>                <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fid:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;cp *.so Dist/&quot;</span> <span class="hljs-keyword">in</span> line:<br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;FreeImage: $(STATICLIB) $(SHAREDLIB)&quot;</span> <span class="hljs-keyword">in</span> line:<br>                        line = <span class="hljs-string">&quot;FreeImage: $(STATICLIB)&quot;</span><br>                    <span class="hljs-built_in">print</span>(line, end=<span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-keyword">elif</span> PLATFORM_IS_LINUX:<br>            <span class="hljs-keyword">with</span> fileinput.FileInput(<br>                    os.path.join(path, <span class="hljs-string">&quot;Source/LibWebP/src/dsp/&quot;</span><br>                                 <span class="hljs-string">&quot;dsp.upsampling_mips_dsp_r2.c&quot;</span>),<br>                    inplace=<span class="hljs-literal">True</span>, backup=<span class="hljs-string">&quot;.bak&quot;</span>) <span class="hljs-keyword">as</span> fid:<br>                <span class="hljs-keyword">for</span> i, line <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(fid):<br>                    <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-number">36</span> <span class="hljs-keyword">and</span> i &lt;= <span class="hljs-number">44</span>:<br>                        line = line.replace(<span class="hljs-string">&quot;%[\&quot;&quot;</span>, <span class="hljs-string">&quot;%[\&quot; &quot;</span>)<br>                        line = line.replace(<span class="hljs-string">&quot;\&quot;],&quot;</span>, <span class="hljs-string">&quot; \&quot;],&quot;</span>)<br>                    <span class="hljs-built_in">print</span>(line, end=<span class="hljs-string">&quot;&quot;</span>)<br>            <span class="hljs-keyword">with</span> fileinput.FileInput(<br>                    os.path.join(path, <span class="hljs-string">&quot;Source/LibWebP/src/dsp/&quot;</span><br>                                 <span class="hljs-string">&quot;dsp.yuv_mips_dsp_r2.c&quot;</span>),<br>                    inplace=<span class="hljs-literal">True</span>, backup=<span class="hljs-string">&quot;.bak&quot;</span>) <span class="hljs-keyword">as</span> fid:<br>                <span class="hljs-keyword">for</span> i, line <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(fid):<br>                    <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-number">56</span> <span class="hljs-keyword">and</span> i &lt;= <span class="hljs-number">58</span>:<br>                        line = line.replace(<span class="hljs-string">&quot;\&quot;#&quot;</span>, <span class="hljs-string">&quot;\&quot;# &quot;</span>)<br>                        line = line.replace(<span class="hljs-string">&quot;\&quot;(%&quot;</span>, <span class="hljs-string">&quot; \&quot;(%&quot;</span>)<br>                    <span class="hljs-built_in">print</span>(line, end=<span class="hljs-string">&quot;&quot;</span>)<br><br>        subprocess.call([<span class="hljs-string">&quot;make&quot;</span>, <span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;Makefile.gnu&quot;</span>,<br>                         <span class="hljs-string">&quot;-j&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(multiprocessing.cpu_count())], cwd=path)<br><br>        copy_file_if_not_exists(<br>            os.path.join(path, <span class="hljs-string">&quot;Source/FreeImage.h&quot;</span>),<br>            os.path.join(args.install_path, <span class="hljs-string">&quot;include/FreeImage.h&quot;</span>))<br>        copy_file_if_not_exists(<br>            os.path.join(path, <span class="hljs-string">&quot;libfreeimage.a&quot;</span>),<br>            os.path.join(args.install_path, <span class="hljs-string">&quot;lib/libfreeimage.a&quot;</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_glew</span>(<span class="hljs-params">args</span>):<br>    path = os.path.join(args.build_path, <span class="hljs-string">&quot;glew&quot;</span>)<br>    <span class="hljs-comment"># if os.path.exists(path):</span><br>        <span class="hljs-comment"># return</span><br><br>    <span class="hljs-comment"># url = &quot;https://kent.dl.sourceforge.net/project/glew/&quot; \</span><br>          <span class="hljs-comment"># &quot;glew/2.1.0/glew-2.1.0.zip&quot;</span><br>    <span class="hljs-comment"># archive_path = os.path.join(args.download_path, &quot;glew-2.1.0.zip&quot;)</span><br>    <span class="hljs-comment"># download_zipfile(url, archive_path, args.build_path,</span><br>                     <span class="hljs-comment"># &quot;dff2939fd404d054c1036cc0409d19f1&quot;)</span><br>    <span class="hljs-comment"># shutil.move(os.path.join(args.build_path, &quot;glew-2.1.0&quot;), path)</span><br><br>    build_cmake_project(args, os.path.join(path, <span class="hljs-string">&quot;build/cmake/__build__&quot;</span>))<br><br>    <span class="hljs-keyword">if</span> PLATFORM_IS_WINDOWS:<br>        shutil.move(os.path.join(args.install_path, <span class="hljs-string">&quot;bin/glew32.dll&quot;</span>),<br>                    os.path.join(args.install_path, <span class="hljs-string">&quot;lib/glew32.dll&quot;</span>))<br>        os.remove(os.path.join(args.install_path, <span class="hljs-string">&quot;bin/glewinfo.exe&quot;</span>))<br>        os.remove(os.path.join(args.install_path, <span class="hljs-string">&quot;bin/visualinfo.exe&quot;</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_gflags</span>(<span class="hljs-params">args</span>):<br>    path = os.path.join(args.build_path, <span class="hljs-string">&quot;gflags&quot;</span>)<br>    <span class="hljs-comment"># if os.path.exists(path):</span><br>        <span class="hljs-comment"># return</span><br><br>    <span class="hljs-comment"># url = &quot;https://github.com/gflags/gflags/archive/v2.2.1.zip&quot;</span><br>    <span class="hljs-comment"># archive_path = os.path.join(args.download_path, &quot;gflags-2.2.1.zip&quot;)</span><br>    <span class="hljs-comment"># download_zipfile(url, archive_path, args.build_path,</span><br>                     <span class="hljs-comment"># &quot;2d988ef0b50939fb50ada965dafce96b&quot;)</span><br>    <span class="hljs-comment"># shutil.move(os.path.join(args.build_path, &quot;gflags-2.2.1&quot;), path)</span><br>    os.remove(os.path.join(path, <span class="hljs-string">&quot;BUILD&quot;</span>))<br><br>    build_cmake_project(args, os.path.join(path, <span class="hljs-string">&quot;__build__&quot;</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_glog</span>(<span class="hljs-params">args</span>):<br>    path = os.path.join(args.build_path, <span class="hljs-string">&quot;glog&quot;</span>)<br>    <span class="hljs-comment"># if os.path.exists(path):</span><br>        <span class="hljs-comment"># return</span><br><br>    <span class="hljs-comment"># url = &quot;https://github.com/google/glog/archive/v0.3.5.zip&quot;</span><br>    <span class="hljs-comment"># archive_path = os.path.join(args.download_path, &quot;glog-0.3.5.zip&quot;)</span><br>    <span class="hljs-comment"># download_zipfile(url, archive_path, args.build_path,</span><br>                     <span class="hljs-comment"># &quot;454766d0124951091c95bad33dafeacd&quot;)</span><br>    <span class="hljs-comment"># shutil.move(os.path.join(args.build_path, &quot;glog-0.3.5&quot;), path)</span><br><br>    build_cmake_project(args, os.path.join(path, <span class="hljs-string">&quot;__build__&quot;</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_suite_sparse</span>(<span class="hljs-params">args</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> args.with_suite_sparse:<br>        <span class="hljs-keyword">return</span><br><br>    path = os.path.join(args.build_path, <span class="hljs-string">&quot;suite-sparse&quot;</span>)<br>    <span class="hljs-comment"># if os.path.exists(path):</span><br>        <span class="hljs-comment"># return</span><br><br>    <span class="hljs-comment"># url = &quot;https://codeload.github.com/jlblancoc/&quot; \</span><br>          <span class="hljs-comment"># &quot;suitesparse-metis-for-windows/zip/&quot; \</span><br>          <span class="hljs-comment"># &quot;7bc503bfa2c4f1be9176147d36daf9e18340780a&quot;</span><br>    <span class="hljs-comment"># archive_path = os.path.join(args.download_path, &quot;suite-sparse.zip&quot;)</span><br>    <span class="hljs-comment"># download_zipfile(url, archive_path, args.build_path,</span><br>                     <span class="hljs-comment"># &quot;e7c27075e8e0afc9d2cf188630090946&quot;)</span><br>    <span class="hljs-comment"># shutil.move(os.path.join(args.build_path,</span><br>                             <span class="hljs-comment"># &quot;suitesparse-metis-for-windows-&quot;</span><br>                             <span class="hljs-comment"># &quot;7bc503bfa2c4f1be9176147d36daf9e18340780a&quot;), path)</span><br><br>    build_cmake_project(args, os.path.join(path, <span class="hljs-string">&quot;__build__&quot;</span>))<br><br>    <span class="hljs-keyword">if</span> PLATFORM_IS_WINDOWS:<br>        lapack_blas_path = os.path.join(args.install_path,<br>                                        <span class="hljs-string">&quot;lib64/lapack_blas_windows/*.dll&quot;</span>)<br>        <span class="hljs-keyword">for</span> library_path <span class="hljs-keyword">in</span> glob.glob(lapack_blas_path):<br>            copy_file_if_not_exists(<br>                library_path, os.path.join(args.install_path, <span class="hljs-string">&quot;lib&quot;</span>,<br>                                           os.path.basename(library_path)))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_ceres_solver</span>(<span class="hljs-params">args</span>):<br>    path = os.path.join(args.build_path, <span class="hljs-string">&quot;ceres-solver&quot;</span>)<br>    <span class="hljs-comment"># if os.path.exists(path):</span><br>        <span class="hljs-comment"># return</span><br><br>    <span class="hljs-comment"># url = &quot;https://github.com/ceres-solver/ceres-solver/archive/1.14.0.zip&quot;</span><br>    <span class="hljs-comment"># archive_path = os.path.join(args.download_path, &quot;ceres-solver-1.14.0.zip&quot;)</span><br>    <span class="hljs-comment"># download_zipfile(url, archive_path, args.build_path,</span><br>                     <span class="hljs-comment"># &quot;26b255b7a9f330bbc1def3b839724a2a&quot;)</span><br>    <span class="hljs-comment"># shutil.move(os.path.join(args.build_path, &quot;ceres-solver-1.14.0&quot;), path)</span><br><br>    extra_config_args = [<br>        <span class="hljs-string">&quot;-DBUILD_TESTING=OFF&quot;</span>,<br>        <span class="hljs-string">&quot;-DBUILD_EXAMPLES=OFF&quot;</span>,<br>    ]<br><br>    <span class="hljs-keyword">if</span> args.with_suite_sparse:<br>        extra_config_args.extend([<br>            <span class="hljs-string">&quot;-DLAPACK=ON&quot;</span>,<br>            <span class="hljs-string">&quot;-DSUITESPARSE=ON&quot;</span>,<br>        ])<br>        <span class="hljs-keyword">if</span> PLATFORM_IS_WINDOWS:<br>            extra_config_args.extend([<br>                <span class="hljs-string">&quot;-DLAPACK_LIBRARIES=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<br>                    os.path.join(args.install_path,<br>                                 <span class="hljs-string">&quot;lib64/lapack_blas_windows/liblapack.lib&quot;</span>)),<br>                <span class="hljs-string">&quot;-DBLAS_LIBRARIES=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<br>                    os.path.join(args.install_path,<br>                                 <span class="hljs-string">&quot;lib64/lapack_blas_windows/libblas.lib&quot;</span>)),<br>            ])<br><br>    <span class="hljs-keyword">if</span> PLATFORM_IS_WINDOWS:<br>        extra_config_args.append(<span class="hljs-string">&quot;-DCMAKE_CXX_FLAGS=/DGOOGLE_GLOG_DLL_DECL=&quot;</span>)<br><br>    build_cmake_project(args, os.path.join(path, <span class="hljs-string">&quot;__build__&quot;</span>),<br>                        extra_config_args=extra_config_args)<br></code></pre></td></tr></table></figure><p>5.改完上面几个函数后，还有个地方需要更改，就是build_post_process函数，这个函数会复制一些库到__install__目录下，其中对于cgal相关库那一部分的复制需要与你实际安装的版本对应，我的修改如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_post_process</span>(<span class="hljs-params">args</span>):<br>...<br>        <span class="hljs-keyword">if</span> args.cgal_path:<br>            gmp_lib_path = os.path.join(<br>                args.cgal_path, <span class="hljs-string">&quot;../auxiliary/gmp/lib/libgmp-10.dll&quot;</span>)<br>            <span class="hljs-keyword">if</span> os.path.exists(gmp_lib_path):<br>                copy_file_if_not_exists(<br>                    gmp_lib_path,<br>                    os.path.join(args.install_path, <span class="hljs-string">&quot;lib/libgmp-10.dll&quot;</span>))<br>            copy_file_if_not_exists(<br>                os.path.join(args.cgal_path,<br>                             <span class="hljs-string">&quot;bin/Release/CGAL-vc140-mt-4.14.3.dll&quot;</span>),<br>                os.path.join(args.install_path, <span class="hljs-string">&quot;lib/CGAL-vc140-mt-4.14.3.dll&quot;</span>))<br></code></pre></td></tr></table></figure><p>这个地方不改也行，报错的时候把对应的库手动复制过去也行“bin&#x2F;Release&#x2F;CGAL-vc140-mt-4.14.3.dll” 和 “lib&#x2F;CGAL-vc140-mt-4.14.3.dll”类似文件可以在cgal的build目录下找到的<br>这里补充说明下，eigen库在编译时可能需要用到boost库，但是cmake过程中没有办法让你手动选择，因此可能需要你提前修改eigen的makefile，找到eigen\CMakeLists.txt，在一个比较靠前的位置set一下Boost_INCLUDE_DIR，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span>(Boost_INCLUDE_DIR <span class="hljs-string">&quot;E:/3DAbout/ThirdParty/boost_1_66_0/msvc-140_64/include/boost-1_66&quot;</span>)<br></code></pre></td></tr></table></figure><p>6.在colmap根目录下打开cmd，使用build.py脚本进行编译即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python scripts/python/build.py --build_path E:/3DAbout/colmap/build --colmap_path E:/3DAbout/colmap --boost_path <span class="hljs-string">&quot;E:/3DAbout/ThirdParty/boost_1_66_0/msvc-140_64&quot;</span> --qt_path <span class="hljs-string">&quot;C:/Qt/Qt5.9.3/5.9.3/msvc2015_64&quot;</span> --cuda_path <span class="hljs-string">&quot;C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0&quot;</span> --cgal_path <span class="hljs-string">&quot;E:/3DAbout/ThirdParty/CGAL-4.14.3/build&quot;</span><br></code></pre></td></tr></table></figure><p>这里建议在colmap根目录下创建一个bat脚本，直接执行bat脚本即可<br>7.等待…<br>经过漫长的等待，应该是会编译成功的，不成功，可能需要你具体地去查查哪里有问题了，不过一般按照我这流程下来是没问题的。脚本跑完之后会在build目录下生成__install__目录，里面会有COLMAP.bat，执行即可，至此编译成功。<br>8.如果你有反复需要编译的需求，可以将build.py中那些第三方库编译函数中的目录检测功能重新打开，防止后面在编译的时候又会编译一遍第三方库，就是这句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> os.path.exists(path):<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><hr><p>总结：编译完成后发现，其实也没什么难的，windows下的编译问题多发生在那个build.py，哪里发生问题了就去看看build.py那一部分所对应的功能是啥，然后看看能不能曲线解决下，加油，希望你能编译出一个能用的colmap，欢迎大家有问题在评论区讨论。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JGit学习以及基于JGit搭建一个简单的web库</title>
    <link href="/2022/04/19/JGit%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%9F%BA%E4%BA%8EJGit%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84web%E5%BA%93/"/>
    <url>/2022/04/19/JGit%E5%AD%A6%E4%B9%A0%E4%BB%A5%E5%8F%8A%E5%9F%BA%E4%BA%8EJGit%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84web%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>本文记录了一些简单的JGit使用方法，同时基于JGit，设想搭建了一个可以实现一些简单的服务器通讯，将数据自动上传到Git服务器，白嫖一些远程的数据库。可以在以后的一些简单项目中，比如记账软件，进行集成。</p><p>同时这也是本人第一次接触maven，也当作学习笔记了。</p><p>同步blog：<a href="https://kingqibin.github.io/">https://kingqibin.github.io/</a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><table><thead><tr><th align="center">软件</th><th align="left">版本</th></tr></thead><tbody><tr><td align="center">jdk</td><td align="left">v13.0.2</td></tr><tr><td align="center">maven</td><td align="left">v3.8.1</td></tr><tr><td align="center">intellij idea</td><td align="left">community 2020.3</td></tr></tbody></table><h2 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h2><p>使用idea进行创建，这里使用空项目创建<br><img src="https://img-blog.csdnimg.cn/img_convert/a190a9b6c8e358d0bcec860f0a934b93.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0c393eab7bf961b201a9142d27010c8e.png"></p><p>我这边是这样创建的，也不是很清楚具体的maven项目到底是怎么样的，目前来说就这样算了，等后面再学习下吧</p><p>PS：在创建项目之前，最好把一些maven的配置给配好，比如国内镜像之类，我自己在用的时候即使改了setting，但是也会遇到intellij idea无法加载新配置的情况，依然用的是原先的配置，遇到这种情况就把项目创建的默认设置改一下，然后删库重新创建下就好了</p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 导入JGit库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.jgit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>org.eclipse.jgit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.1.201812262042-r<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这里需要绑定一个简单实现的slf4j否则会提示没有实现的错误 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-simple<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 文件IO操作的一个库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- json读取与解析 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.json<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>20201115<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>maven小知识：引入dependency时要先用<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>标签引用起来</p><h2 id="JGitWebSync设计"><a href="#JGitWebSync设计" class="headerlink" title="JGitWebSync设计"></a>JGitWebSync设计</h2><p>目前阶段考虑到需要的功能有</p><ul><li>clone远程库</li><li>加载本地库</li><li>添加修改文件</li><li>删除文件</li><li>仓库push来实现文件的提交</li><li>仓库pull来实现文件的同步</li></ul><p>在实现时主要参考<a href="https://www.cnblogs.com/xiaoqi/p/jgit.html">blog</a></p><h3 id="0-ssh实现权限访问"><a href="#0-ssh实现权限访问" class="headerlink" title="0. ssh实现权限访问"></a>0. ssh实现权限访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SshSessionFactory</span> <span class="hljs-variable">sshSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JschConfigSessionFactory</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(OpenSshConfig.Host host, Session session)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> JSch <span class="hljs-title function_">createDefaultJSch</span><span class="hljs-params">(FS fs)</span> <span class="hljs-keyword">throws</span> JSchException &#123;<br>        <span class="hljs-type">JSch</span> <span class="hljs-variable">defaultJSch</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.createDefaultJSch(fs);<br>        defaultJSch.removeAllIdentity();<br>        defaultJSch.addIdentity(<span class="hljs-string">&quot;~/.ssh/id_rsa&quot;</span>);<br>        <span class="hljs-keyword">return</span> defaultJSch;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">TransportConfigCallback</span> <span class="hljs-variable">transportConfigCallback</span> <span class="hljs-operator">=</span> transport -&gt; &#123;<br>    <span class="hljs-keyword">if</span> (transport <span class="hljs-keyword">instanceof</span> SshTransport) &#123;<br>        <span class="hljs-type">SshTransport</span> <span class="hljs-variable">sshTransport</span> <span class="hljs-operator">=</span> (SshTransport) transport;<br>        sshTransport.setSshSessionFactory(JGitWebSync.<span class="hljs-built_in">this</span>.sshSessionFactory);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里的写法基本是固定的，其中的id_rsa是通过<code>ssh-keygen -t rsa</code>生成获得的，如果之前生成了就不用管了，这里用的是私钥，而不是<code>id_rsa.pub</code></p><h3 id="1-clone远程库"><a href="#1-clone远程库" class="headerlink" title="1. clone远程库"></a>1. clone远程库</h3><p>有了权限后就可以clone库了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.git = Git.cloneRepository()<br>        .setTransportConfigCallback(<span class="hljs-built_in">this</span>.transportConfigCallback)<br>        .setURI(remoteURL) <span class="hljs-comment">// 远程地址 这里推荐使用ssh地址</span><br>        .setDirectory(repoDir) <span class="hljs-comment">// 本地用来存放数据的文件夹 要为空文件夹</span><br>        .call();<br></code></pre></td></tr></table></figure><h3 id="2-加载本地库"><a href="#2-加载本地库" class="headerlink" title="2. 加载本地库"></a>2. 加载本地库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Repository</span> <span class="hljs-variable">repository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileRepositoryBuilder</span>()<br>        .setGitDir(Paths.get(localPath, <span class="hljs-string">&quot;.git&quot;</span>).toFile())<br>        .build();<br><span class="hljs-built_in">this</span>.git = Git.wrap(repository);<br></code></pre></td></tr></table></figure><p>这里人通过读取本地目录下的<code>.git</code>文件夹，之后使用<code>Git.wrap</code>进行封装成<code>Git</code>库</p><h3 id="3-添加修改文件"><a href="#3-添加修改文件" class="headerlink" title="3. 添加修改文件"></a>3. 添加修改文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.git.add().addFilepattern(fileName).call();<br></code></pre></td></tr></table></figure><p>这里的<code>fileName</code>为添加的文件正则表达式，这里推荐使用每个文件添加一次进行调用，不要 <code>git add .</code>，不然在实际使用时可能会出现很多无用的添加，这里的fileName路径是相对于git库的路径，简言之跟普通的git使用是相同的</p><h3 id="4-删除文件"><a href="#4-删除文件" class="headerlink" title="4. 删除文件"></a>4. 删除文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.git.rm().addFilepattern(fileName).call();<br></code></pre></td></tr></table></figure><p>这里的用法跟<code>add</code>类似，众所周知直接删除文件，之后通过<code>git add .</code>之后提交是可以更改git仓库的，但是JGit在push的时候并不能把删除操作同步到服务器（原版Git是可以的，可能是有什么bug？），实在想用也是可以的，但是还是需要手动调用<code>this.git.remoteRemove()</code>指令，不如就直接使用<code>rm()</code>了</p><h3 id="5-仓库push来实现文件的提交"><a href="#5-仓库push来实现文件的提交" class="headerlink" title="5. 仓库push来实现文件的提交"></a>5. 仓库push来实现文件的提交</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 提交</span><br><span class="hljs-built_in">this</span>.git.commit().setMessage(message).call();<br><span class="hljs-comment">// 推送</span><br><span class="hljs-built_in">this</span>.git.push()<br>        .setTransportConfigCallback(<span class="hljs-built_in">this</span>.transportConfigCallback)<br>        .setRemote(<span class="hljs-string">&quot;origin&quot;</span>)<br>        .setRefSpecs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RefSpec</span>(<span class="hljs-string">&quot;master&quot;</span>))<br>        .call();<br></code></pre></td></tr></table></figure><p>这里将<code>commit</code>和<code>push</code>放到一起来实现，这里的<code>setTransportConfigCallback</code>实现了ssh访问权限的加载，<code>setRemote</code>和<code>setRefSpecs</code>也可以当作接口暴露出来</p><h3 id="6-仓库pull来实现文件的同步"><a href="#6-仓库pull来实现文件的同步" class="headerlink" title="6. 仓库pull来实现文件的同步"></a>6. 仓库pull来实现文件的同步</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.git.pull()<br>        .setTransportConfigCallback(<span class="hljs-built_in">this</span>.transportConfigCallback)<br>        .setRemote(<span class="hljs-string">&quot;origin&quot;</span>)<br>        .call();<br></code></pre></td></tr></table></figure><p>拉取就比较简单了，通上面的操作即可</p><p>还有一些其他的设计这里就不详细介绍了，可以参考</p><p><a href="https://github.com/Kingqibin/JGitWebSync">https://github.com/Kingqibin/JGitWebSync</a></p><hr><p>后面的话看看有没有机会用该库写个小项目试一下，ok，如果有问题欢迎在下面留言评论~</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Boost Log 模块学习</title>
    <link href="/2022/04/19/Boost-Log%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/04/19/Boost-Log%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>该笔记用来记录学习boost库的日志模块，方便在后面的使用过程中翻阅查找。参考视频<a href="https://study.163.com/course/courseMain.htm?courseId=1209582814">Boost日志库快速入门</a>。</p><p>首先拿出log的框架设计图(祭天)，后面会反复参考这个东西。</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-aD9oMVbj-1625902858707)(<a href="https://www.boost.org/doc/libs/1_63_0/libs/log/doc/html/images/log/Design.png)]">https://www.boost.org/doc/libs/1_63_0/libs/log/doc/html/images/log/Design.png)]</a></p><h2 id="1-快速示例"><a href="#1-快速示例" class="headerlink" title="1. 快速示例"></a>1. 快速示例</h2><p>示例源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/trivial.hpp&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span>*[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(trace) &lt;&lt; <span class="hljs-string">&quot;A trace severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(debug) &lt;&lt; <span class="hljs-string">&quot;A debug severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;An informational severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(warning) &lt;&lt; <span class="hljs-string">&quot;A warning severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(error) &lt;&lt; <span class="hljs-string">&quot;An error severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(fatal) &lt;&lt; <span class="hljs-string">&quot;A fatal severity message&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[2021-07-08 15:39:05.226965] [0x000080ac] [trace]   A trace severity message<br>[2021-07-08 15:39:05.227964] [0x000080ac] [debug]   A debug severity message<br>[2021-07-08 15:39:05.227964] [0x000080ac] [info]    An informational severity message<br>[2021-07-08 15:39:05.227964] [0x000080ac] [warning] A warning severity message<br>[2021-07-08 15:39:05.227964] [0x000080ac] [error]   An error severity message<br>[2021-07-08 15:39:05.227964] [0x000080ac] [fatal]   A fatal severity message<br></code></pre></td></tr></table></figure><p>格式含义</p><p><strong>[时间戳] [线程id] [日志级别]   打印信息</strong></p><p>这里的日志级别(递增)使用规范如下</p><ul><li><strong>trace</strong> 最低级，用来打印一些执行信息，比如执行某些函数</li><li><strong>debug</strong> 用来做一些调试输出</li><li><strong>info</strong> 打印一些比较重要的阶段性信息</li><li><strong>warning</strong> 打印一些可能不符合程序执行的潜在隐患</li><li><strong>error</strong> 打印一些不影响程序继续执行的错误</li><li><strong>fatal</strong> 通常是程序崩溃时打印的提示语句</li></ul><p>这里的<strong>BOOST_LOG_TRIVIAL</strong>是一个宏定义，该宏会根据输入的日志级别，生成指定的类流对象，该对象支持插入操作符，将输入的信息输出到控制台。</p><h2 id="2-简单日志过滤"><a href="#2-简单日志过滤" class="headerlink" title="2. 简单日志过滤"></a>2. 简单日志过滤</h2><p>示例源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/trivial.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/core.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/expressions.hpp&gt;</span></span><br><span class="hljs-keyword">namespace</span> logging = boost::log;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 设置过滤器</span><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">set_filter</span><br>(<br><span class="hljs-comment">// 这里是一个lambda表达式 只有大于info级别的日志才会输出</span><br>logging::trivial::severity &gt;= logging::trivial::info<br>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span>*[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(trace) &lt;&lt; <span class="hljs-string">&quot;A trace severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(debug) &lt;&lt; <span class="hljs-string">&quot;A debug severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;An informational severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(warning) &lt;&lt; <span class="hljs-string">&quot;A warning severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(error) &lt;&lt; <span class="hljs-string">&quot;An error severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(fatal) &lt;&lt; <span class="hljs-string">&quot;A fatal severity message&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[2021-07-08 15:57:58.849685] [0x00004e00] [info]    An informational severity message<br>[2021-07-08 15:57:58.851685] [0x00004e00] [warning] A warning severity message<br>[2021-07-08 15:57:58.851685] [0x00004e00] [error]   An error severity message<br>[2021-07-08 15:57:58.851685] [0x00004e00] [fatal]   A fatal severity message<br></code></pre></td></tr></table></figure><p>这里的**logging::core::get()**获取到了全局的核心单例日志对象，因此该过滤是对全局日志对象的设置。</p><h2 id="3-设置输出槽"><a href="#3-设置输出槽" class="headerlink" title="3. 设置输出槽"></a>3. 设置输出槽</h2><p>基本步骤</p><ol><li>创建输出槽</li><li>在日志核心中注册已经创建的输出槽</li></ol><p>设置输出槽的注意事项</p><ol><li>一般在程序的启动阶段设置输出槽</li><li>快速日志输出使用库内建的输出槽作为默认输出</li><li>一旦用户向日志核心添加了其他的输出槽，将不再使用默认的输出槽</li></ol><p>示例源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/trivial.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/core.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/expressions.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/file.hpp&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> logging = boost::log;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">// 设置日志输出文件</span><br>logging::<span class="hljs-built_in">add_file_log</span>(<span class="hljs-string">&quot;E:\\temp\\sample.log&quot;</span>);<br><br><span class="hljs-comment">// 设置过滤器</span><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">set_filter</span><br>(<br><span class="hljs-comment">// 只有大于info级别的日志才会输出</span><br>logging::trivial::severity &gt;= logging::trivial::info<br>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span>*[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(trace) &lt;&lt; <span class="hljs-string">&quot;A trace severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(debug) &lt;&lt; <span class="hljs-string">&quot;A debug severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;An informational severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(warning) &lt;&lt; <span class="hljs-string">&quot;A warning severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(error) &lt;&lt; <span class="hljs-string">&quot;An error severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(fatal) &lt;&lt; <span class="hljs-string">&quot;A fatal severity message&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>示例输出</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ade32e1d7fcef625b230e2f772bd8bef.png" alt="输出到log文件"></p><p>可以看到，虽然有输出日志信息，但是格式跟默认的格式不符，没有了时间戳、线程id以及日志级别。要想设置地更为复杂，可以继续往下看。</p><p>示例源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/trivial.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/core.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/expressions.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/file.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/console.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/common_attributes.hpp&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> logging = boost::log;<br><span class="hljs-keyword">namespace</span> keywords = boost::log::keywords;<br><span class="hljs-keyword">namespace</span> sinks = boost::log::sinks;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">// 设置日志输出文件</span><br>logging::<span class="hljs-built_in">add_file_log</span>(<br>keywords::file_name = <span class="hljs-string">&quot;E:\\temp\\sample_%N.log&quot;</span>, <span class="hljs-comment">// 以smaple_N 为模板 N从0开始递增，配合下面的rotation使用</span><br>keywords::rotation_size = <span class="hljs-number">1</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> , <span class="hljs-comment">// 每1M归一次档，生成一个日志文件</span><br>keywords::time_based_rotation = sinks::file::<span class="hljs-built_in">rotation_at_time_point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-comment">// 每次 00:00:00(时间点) 生成一个归档</span><br>keywords::format = <span class="hljs-string">&quot;[%TimeStamp%]: %Message%&quot;</span> <span class="hljs-comment">// 输出日志的格式 [时间戳]: 打印信息</span><br>);<br>    <br>logging::<span class="hljs-built_in">add_console_log</span>( <span class="hljs-comment">// 输出到控制台</span><br>std::clog,<br>keywords::format = <span class="hljs-string">&quot;[%TimeStamp%]: %Message%&quot;</span><br>);<br>    <br><span class="hljs-comment">// 设置过滤器</span><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">set_filter</span><br>(<br><span class="hljs-comment">// 只有大于info级别的日志才会输出</span><br>logging::trivial::severity &gt;= logging::trivial::info<br>);<br>    <span class="hljs-comment">// 添加一些默认属性，否则上面设置的东西可能不生效，如时间戳</span><br>logging::<span class="hljs-built_in">add_common_attributes</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span>*[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(trace) &lt;&lt; <span class="hljs-string">&quot;A trace severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(debug) &lt;&lt; <span class="hljs-string">&quot;A debug severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;An informational severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(warning) &lt;&lt; <span class="hljs-string">&quot;A warning severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(error) &lt;&lt; <span class="hljs-string">&quot;An error severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(fatal) &lt;&lt; <span class="hljs-string">&quot;A fatal severity message&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例输出</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8b5f9e9a8e180e11a0e0cc1a8ac3ac5d.png" alt="输出到log文件"></p><p>这里就不展示自动归档了，很简单，用一个循环或者跳时间试一下就好了。</p><p>如果说想要再添加一个文件用来保存日志的话，就使用logging::add_file_log函数再设置一个日志文件就可以了。</p><p>手动设置输出槽也是比较简单的，参考视频中的项目工程</p><p>示例源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/smart_ptr/shared_ptr.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/smart_ptr/make_shared_object.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/core.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/trivial.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sinks/sync_frontend.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sinks/text_ostream_backend.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/logger.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/record_ostream.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/core/null_deleter.hpp&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> logging = boost::log;<br><span class="hljs-keyword">namespace</span> src = boost::log::sources;<br><span class="hljs-keyword">namespace</span> sinks = boost::log::sinks;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 创建输出槽</span><br><span class="hljs-keyword">typedef</span> sinks::synchronous_sink&lt;sinks::text_ostream_backend&gt; text_sink;<br>boost::shared_ptr&lt;text_sink&gt; sink = boost::<span class="hljs-built_in">make_shared</span>&lt;text_sink&gt;();<br><br><span class="hljs-comment">// 添加写文件的流</span><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">make_shared</span>&lt; std::ofstream &gt;(<span class="hljs-string">&quot;E:\\temp\\sample.log&quot;</span>));<br><br><span class="hljs-comment">// 同时添加输出到屏幕</span><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(boost::<span class="hljs-built_in">shared_ptr</span>&lt;std::ostream&gt;(&amp;std::clog, boost::<span class="hljs-built_in">null_deleter</span>()));<br><br><span class="hljs-comment">// 把输出槽注册到日志库核心</span><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">add_sink</span>(sink);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init</span>();<br><br>src::logger lg;<br><span class="hljs-built_in">BOOST_LOG</span>(lg) &lt;&lt; <span class="hljs-string">&quot;Hello world!&quot;</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出的话就比较简单了，这里把输出结果既输出到了控制台，又输出到了文件。</p><h2 id="4-创建日志源"><a href="#4-创建日志源" class="headerlink" title="4. 创建日志源"></a>4. 创建日志源</h2><p>日志源，照我的理解就是创建一个用来向日志处理层发送数据的一个对象。</p><p>以创建全局日志源为例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/trivial.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/core.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/expressions.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/file.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/common_attributes.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sinks/text_file_backend.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/logger.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/severity_logger.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/record_ostream.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/global_logger_storage.hpp&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> logging = boost::log;<br><span class="hljs-keyword">namespace</span> keywords = boost::log::keywords;<br><span class="hljs-keyword">namespace</span> sinks = boost::log::sinks;<br><span class="hljs-keyword">namespace</span> src = boost::log::sources;<br><br><span class="hljs-comment">// 定义一个全局的logger标签 my_logger</span><br><span class="hljs-built_in">BOOST_LOG_INLINE_GLOBAL_LOGGER_DEFAULT</span>(my_logger, src::logger_mt)<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 这里的初始化都是对于log处理层而言，并不牵扯到日志源</span><br><span class="hljs-comment">// 设置日志输出文件</span><br>logging::<span class="hljs-built_in">add_file_log</span>(<br>keywords::file_name = <span class="hljs-string">&quot;E:\\temp\\sample_%N.log&quot;</span>, <span class="hljs-comment">// 以smaple_N 为模板 N从0开始递增，配合下面的rotation使用</span><br>keywords::rotation_size = <span class="hljs-number">1</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> , <span class="hljs-comment">// 每1M归一次档，生成一个日志文件</span><br>keywords::time_based_rotation = sinks::file::<span class="hljs-built_in">rotation_at_time_point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-comment">// 每次 00:00:00(时间点) 生成一个归档</span><br>keywords::format = <span class="hljs-string">&quot;[%TimeStamp%]: %Message%&quot;</span><span class="hljs-comment">// 输出日志的格式 [时间戳]: 打印信息</span><br>);<br><br><span class="hljs-comment">//// 设置过滤器</span><br><span class="hljs-comment">//logging::core::get()-&gt;set_filter</span><br><span class="hljs-comment">//(</span><br><span class="hljs-comment">//// 只有大于info级别的日志才会输出</span><br><span class="hljs-comment">//logging::trivial::severity &gt;= logging::trivial::info</span><br><span class="hljs-comment">//);</span><br><span class="hljs-comment">// 添加一些默认属性，否则上面设置的东西可能不生效，如时间戳</span><br>logging::<span class="hljs-built_in">add_common_attributes</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span>*[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-comment">// BOOST_LOG_TRIVIAL 这个宏在输出日志时会使用默认的日志源</span><br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(trace) &lt;&lt; <span class="hljs-string">&quot;A trace severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(debug) &lt;&lt; <span class="hljs-string">&quot;A debug severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;An informational severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(warning) &lt;&lt; <span class="hljs-string">&quot;A warning severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(error) &lt;&lt; <span class="hljs-string">&quot;An error severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(fatal) &lt;&lt; <span class="hljs-string">&quot;A fatal severity message&quot;</span>;<br><span class="hljs-comment">// =================================================================================</span><br>    <span class="hljs-comment">// 获取全局的logger</span><br>src::logger_mt&amp; lg_global = my_logger::<span class="hljs-built_in">get</span>();<br><span class="hljs-comment">// BOOST_LOG_SEV(lg, logging::trivial::severity_level::info) &lt;&lt; &quot;hello world&quot;;</span><br><span class="hljs-built_in">BOOST_LOG</span>(lg_global) &lt;&lt; <span class="hljs-string">&quot;hello world&quot;</span>;<br>   <span class="hljs-comment">// =================================================================================</span><br><span class="hljs-comment">// 定义局部的logger</span><br>src::logger lg_local;<br><span class="hljs-comment">// 手动logger输出</span><br>logging::record rec = lg_local.<span class="hljs-built_in">open_record</span>();<br><span class="hljs-keyword">if</span> (rec)<br>&#123;<br><span class="hljs-function">logging::record_ostream <span class="hljs-title">strm</span><span class="hljs-params">(rec)</span></span>;<br>strm &lt;&lt; <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br>strm.<span class="hljs-built_in">flush</span>();<br>lg_local.<span class="hljs-built_in">push_record</span>(boost::<span class="hljs-built_in">move</span>(rec));<br>&#125;<br><span class="hljs-comment">// =================================================================================</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里注意要将log过滤器那一部分注释掉，不然可能打印不出来hello world</p><p>示例结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ad065fbc2a3aec148559405a51b7f73c.png"></p><h2 id="5-设置属性"><a href="#5-设置属性" class="headerlink" title="5. 设置属性"></a>5. 设置属性</h2><p>属性可以是与日志产生相关的信息，如当前的时间、行号、作用域等。属性既可以是固定的值，也可以是一个值生成器。根据作用域进行行划分，属性可以依次分为日志源级属性、线程级属性、全局属性等。这三种属性最终进行汇总，传递到槽。同一作用域内的属性必须不同名，不同作用域的属性可以同名，不同作用域的同名属性按照就近原则进行赋值。</p><p><strong>常用属性</strong>：行号(日志)、时间戳、线程id、进行id。使用logging::add_common_attributes()进行添加。某些属性会在日志源创建时进行添加，如severity_logger。</p><p>示例源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/smart_ptr/shared_ptr.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/smart_ptr/make_shared_object.hpp&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/core.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/expressions.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/attributes.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/attributes/scoped_attribute.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/logger.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/severity_logger.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/record_ostream.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sinks/sync_frontend.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sinks/text_ostream_backend.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/common_attributes.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> logging = boost::log;<br><span class="hljs-keyword">namespace</span> src = boost::log::sources;<br><span class="hljs-keyword">namespace</span> expr = boost::log::expressions;<br><span class="hljs-keyword">namespace</span> sinks = boost::log::sinks;<br><span class="hljs-keyword">namespace</span> attrs = boost::log::attributes;<br><span class="hljs-keyword">namespace</span> keywords = boost::log::keywords;<br><br><span class="hljs-comment">// 手动定义日志级别</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">severity_level</span><br>&#123;<br>normal,<br>notification,<br>warning,<br>error,<br>critical<br>&#125;;<br><br><span class="hljs-comment">// 这里是提供占位符 方便后面在设置格式时使用</span><br><span class="hljs-built_in">BOOST_LOG_ATTRIBUTE_KEYWORD</span>(line_id, <span class="hljs-string">&quot;LineID&quot;</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<br><span class="hljs-built_in">BOOST_LOG_ATTRIBUTE_KEYWORD</span>(severity, <span class="hljs-string">&quot;Severity&quot;</span>, severity_level)<br><span class="hljs-built_in">BOOST_LOG_ATTRIBUTE_KEYWORD</span>(scope, <span class="hljs-string">&quot;Scope&quot;</span>, attrs::named_scope::value_type)<br><span class="hljs-built_in">BOOST_LOG_ATTRIBUTE_KEYWORD</span>(tag_attr, <span class="hljs-string">&quot;Tag&quot;</span>, std::string)<br><span class="hljs-built_in">BOOST_LOG_ATTRIBUTE_KEYWORD</span>(timeline, <span class="hljs-string">&quot;Timeline&quot;</span>, attrs::timer::value_type)<br><br><br><br><span class="hljs-comment">// 因为手动定义了日志级别，为了使得ostream函数能够支持自定义的日志级别，需要提供一个friend函数</span><br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt; (std::ostream&amp; strm, severity_level level)<br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span>* strings[] =<br>&#123;<br><span class="hljs-string">&quot;normal&quot;</span>,<br><span class="hljs-string">&quot;notification&quot;</span>,<br><span class="hljs-string">&quot;warning&quot;</span>,<br><span class="hljs-string">&quot;error&quot;</span>,<br><span class="hljs-string">&quot;critical&quot;</span><br>&#125;;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">static_cast</span>&lt;std::<span class="hljs-type">size_t</span>&gt;(level) &lt; <span class="hljs-built_in">sizeof</span>(strings) / <span class="hljs-built_in">sizeof</span>(*strings))<br>strm &lt;&lt; strings[level];<br><span class="hljs-keyword">else</span><br>strm &lt;&lt; <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(level);<br><br><span class="hljs-keyword">return</span> strm;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">logging_function</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//BOOST_LOG_NAMED_SCOPE(&quot;named_scope_logging&quot;);</span><br><span class="hljs-comment">// 这里直接获取到该函数的定义</span><br><span class="hljs-built_in">BOOST_LOG_FUNCTION</span>();<br><br><span class="hljs-comment">// 定义局部的logger</span><br>src::severity_logger&lt; severity_level &gt; slg;<br><br><span class="hljs-built_in">BOOST_LOG_SEV</span>(slg, normal) &lt;&lt; <span class="hljs-string">&quot;A regular message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_SEV</span>(slg, warning) &lt;&lt; <span class="hljs-string">&quot;Something bad is going on but I can handle it&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_SEV</span>(slg, critical) &lt;&lt; <span class="hljs-string">&quot;Everything crumbles, shoot me now!&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tagged_logging</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">BOOST_LOG_FUNCTION</span>();<br>src::severity_logger&lt; severity_level &gt; slg;<br><span class="hljs-built_in">BOOST_LOG_SEV</span>(slg, normal) &lt;&lt; <span class="hljs-string">&quot;normal log&quot;</span>;<br><br><span class="hljs-comment">// 日志源属性 添加tag</span><br>slg.<span class="hljs-built_in">add_attribute</span>(<span class="hljs-string">&quot;Tag&quot;</span>, attrs::<span class="hljs-built_in">constant</span>&lt; std::string &gt;(<span class="hljs-string">&quot;Important&quot;</span>));<br><span class="hljs-built_in">BOOST_LOG_SEV</span>(slg, normal) &lt;&lt; <span class="hljs-string">&quot;normal log with tag&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">nested_logging</span><span class="hljs-params">(src::logger &amp; lg)</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">100</span>);<br><span class="hljs-built_in">BOOST_LOG</span>(lg) &lt;&lt; <span class="hljs-string">&quot;睡眠100ms&quot;</span>;<br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">200</span>);<br><span class="hljs-built_in">BOOST_LOG</span>(lg) &lt;&lt; <span class="hljs-string">&quot;睡眠200ms&quot;</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">timed_logging</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-comment">// 开始计时</span><br><span class="hljs-built_in">BOOST_LOG_SCOPED_THREAD_ATTR</span>(<span class="hljs-string">&quot;Timeline&quot;</span>, attrs::<span class="hljs-built_in">timer</span>());<br><br>src::logger lg;<br><br><span class="hljs-built_in">BOOST_LOG</span>(lg) &lt;&lt; <span class="hljs-string">&quot;开始对嵌套函数计时&quot;</span>;<br><span class="hljs-built_in">nested_logging</span>(lg);<br><span class="hljs-built_in">BOOST_LOG</span>(lg) &lt;&lt; <span class="hljs-string">&quot;结束对嵌套函数计时&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">typedef</span> sinks::synchronous_sink&lt; sinks::text_ostream_backend &gt; text_sink;<br>boost::shared_ptr&lt; text_sink &gt; sink = boost::<span class="hljs-built_in">make_shared</span>&lt; text_sink &gt;();<br><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">make_shared</span>&lt; std::ofstream &gt;(<span class="hljs-string">&quot;E:\\temp\\sample.log&quot;</span>));<br><br>sink-&gt;<span class="hljs-built_in">set_formatter</span><br>(<br>expr::stream<br>&lt;&lt; std::hex &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">8</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; line_id &lt;&lt; std::dec &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>&lt;&lt; expr::if_(expr::<span class="hljs-built_in">has_attr</span>(timeline)) <span class="hljs-comment">// 添加时间部分的格式化</span><br>[<br>expr::stream &lt;&lt; <span class="hljs-string">&quot;[&quot;</span> &lt;&lt; timeline &lt;&lt; <span class="hljs-string">&quot;] &quot;</span><br>]<br>&lt;&lt; <span class="hljs-string">&quot;: &lt;&quot;</span> &lt;&lt; severity &lt;&lt; <span class="hljs-string">&quot;&gt;\t&quot;</span><br>&lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; scope &lt;&lt; <span class="hljs-string">&quot;)\t&quot;</span><br>&lt;&lt; expr::if_(expr::<span class="hljs-built_in">has_attr</span>(tag_attr))<span class="hljs-comment">//添加标签部分的格式化</span><br>[<br>expr::stream &lt;&lt; <span class="hljs-string">&quot;[&quot;</span> &lt;&lt; tag_attr &lt;&lt; <span class="hljs-string">&quot;] &quot;</span><br>]<br>&lt;&lt; expr::smessage<br>);<br><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">add_sink</span>(sink);<br><br><span class="hljs-comment">// 添加全局属性</span><br>logging::<span class="hljs-built_in">add_common_attributes</span>();<br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">add_global_attribute</span>(<span class="hljs-string">&quot;Scope&quot;</span>, attrs::<span class="hljs-built_in">named_scope</span>());<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-built_in">logging_function</span>();<br><span class="hljs-built_in">tagged_logging</span>();<br><span class="hljs-built_in">timed_logging</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>示例输出</p><p><img src="https://img-blog.csdnimg.cn/img_convert/dcad576563dee0bc8899344718bc33a1.png"></p><p>这里基本上就是教学视频中的项目，添加了一些注释，并把三个项目合到了一起，展示了timeline、tag、severity三个属性的手动添加。只是格式稍微有点儿丑，后面可以自己再格式化亿下。</p><h2 id="6-日志格式化"><a href="#6-日志格式化" class="headerlink" title="6. 日志格式化"></a>6. 日志格式化</h2><p>存在着很多的格式化方式</p><p><strong>Lambda格式化器</strong></p><p>示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++">expr::stream<br>&lt;&lt; std::hex &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">8</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; expr::<span class="hljs-built_in">attr</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;LineID&quot;</span>) &lt;&lt; std::dec &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>&lt;&lt; expr::if_(expr::<span class="hljs-built_in">has_attr</span>(timeline)) <span class="hljs-comment">// 添加时间部分的格式化</span><br>[<br>expr::stream &lt;&lt; <span class="hljs-string">&quot;[&quot;</span> &lt;&lt; timeline &lt;&lt; <span class="hljs-string">&quot;] &quot;</span><br>]<br>&lt;&lt; <span class="hljs-string">&quot;: &lt;&quot;</span> &lt;&lt; severity &lt;&lt; <span class="hljs-string">&quot;&gt;\t&quot;</span><br>&lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; scope &lt;&lt; <span class="hljs-string">&quot;)\t&quot;</span><br>&lt;&lt; expr::if_(expr::<span class="hljs-built_in">has_attr</span>(tag_attr))<span class="hljs-comment">//添加标签部分的格式化</span><br>[<br>expr::stream &lt;&lt; <span class="hljs-string">&quot;[&quot;</span> &lt;&lt; tag_attr &lt;&lt; <span class="hljs-string">&quot;] &quot;</span><br>]<br>&lt;&lt; expr::smessage<br></code></pre></td></tr></table></figure><p>expr &#x3D; boost::log::expressions。这里的stream是一个流的占位符， expr::attr<unsigned int>(“LineID”)、severity、timeline、tag_attr、smessage都是将要输出到流里面的内容，timeline在前面介绍过是通过BOOST_LOG_ATTRIBUTE_KEYWORD(timeline, “Timeline”, attrs::timer::value_type)定义的一个替代符号。</p><p><strong>Boost.Format格式化器</strong></p><p>示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">expr::format(<span class="hljs-string">&quot;%1%: &lt;%2%&gt; %3%&quot;</span>)<br>    %expr::<span class="hljs-built_in">attr</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;LineID&quot;</span>)<br>    %logging::trivial::severity<br>    %expr::smessage<br></code></pre></td></tr></table></figure><p>一看就明白的，不需要太多的介绍，相当于就是使用占位符进行格式化</p><p><strong>专业格式化器</strong></p><p>示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">expr::stream<br>    &lt;&lt; expr::format_date_time&lt;boost::posix_time::ptime&gt;(<span class="hljs-string">&quot;TimeStamp&quot;</span>, <span class="hljs-string">&quot;%Y-%M-%d %H:%M:%S&quot;</span>)<br>    &lt;&lt; <span class="hljs-string">&quot;: &lt;&quot;</span> &lt;&lt; logging::trivial::severity &lt;&lt; <span class="hljs-string">&quot;&gt;&quot;</span><br>    &lt;&lt; expr::smessage<br></code></pre></td></tr></table></figure><p>这里的expr::format_date_time<a href="boost::posix_time::ptime">boost::posix_time::ptime</a>(“TimeStamp”, “%Y-%M-%d %H:%M:%S”)就是一个专业格式化器，可以对时间进行特殊的处理。</p><p><strong>模板字符串格式化器</strong></p><p>示例</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">logging::</span>add_file_log(<br><span class="hljs-title">    keywords::</span>file_name = <span class="hljs-string">&quot;E:\\temp\\sample.log&quot;</span>, <br><span class="hljs-title">    keywords::</span>format = <span class="hljs-string">&quot;[%TimeStamp%]: %Message%&quot;</span> <br>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>就简单的那个使用例子，用%%嵌入属性的名称。sink-&gt;set_formatter不能接受模板字符串作为参数，需要使用parse_formatter函数进行解析。</p><p><strong>自定义格式化器</strong></p><p>示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 定义</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_formatter</span><span class="hljs-params">(logging::record_view <span class="hljs-type">const</span>&amp; rec, logging::formatting_ostream&amp; strm)</span></span><br><span class="hljs-function"></span>&#123;<br>strm &lt;&lt; logging::<span class="hljs-built_in">extract</span>&lt; <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> &gt;(<span class="hljs-string">&quot;LineID&quot;</span>, rec) &lt;&lt; <span class="hljs-string">&quot;: &quot;</span>;<br>strm &lt;&lt; <span class="hljs-string">&quot;&lt;&quot;</span> &lt;&lt; rec[logging::trivial::severity] &lt;&lt; <span class="hljs-string">&quot;&gt; &quot;</span>;<br>strm &lt;&lt; rec[expr::smessage];<br>&#125;<br><span class="hljs-comment">// 使用</span><br>sink-&gt;<span class="hljs-built_in">set_formatter</span>(&amp;my_formatter);<br></code></pre></td></tr></table></figure><p>感觉应该用不到这么高级的定义，就了解下算了。</p><p>所有的示例源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/smart_ptr/shared_ptr.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/smart_ptr/make_shared_object.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/core.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/trivial.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/expressions.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/file.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/console.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sinks/sync_frontend.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sinks/text_ostream_backend.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/severity_logger.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/record_ostream.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/common_attributes.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/core/null_deleter.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/support/date_time.hpp&gt;</span></span><br><br><span class="hljs-keyword">namespace</span> logging = boost::log;<br><span class="hljs-keyword">namespace</span> src = boost::log::sources;<br><span class="hljs-keyword">namespace</span> expr = boost::log::expressions;<br><span class="hljs-keyword">namespace</span> sinks = boost::log::sinks;<br><span class="hljs-keyword">namespace</span> keywords = boost::log::keywords;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initLambdaFormat</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">typedef</span> sinks::synchronous_sink&lt; sinks::text_ostream_backend &gt; text_sink;<br>boost::shared_ptr&lt; text_sink &gt; sink = boost::<span class="hljs-built_in">make_shared</span>&lt; text_sink &gt;();<br><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">make_shared</span>&lt; std::ofstream &gt;(<span class="hljs-string">&quot;E:\\temp\\sample.log&quot;</span>));<br><span class="hljs-comment">// 这里同时把日志输出到控制台</span><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">shared_ptr</span>&lt;std::ostream&gt;(&amp;std::clog, boost::<span class="hljs-built_in">null_deleter</span>())<br>);<br><br>sink-&gt;<span class="hljs-built_in">set_formatter</span><br>(<br>expr::stream<br><span class="hljs-comment">// 行号将以前导为0的8位十六进制显示</span><br>&lt;&lt; std::hex &lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">8</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; expr::<span class="hljs-built_in">attr</span>&lt; <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> &gt;(<span class="hljs-string">&quot;LineID&quot;</span>)<br><span class="hljs-comment">// 注意这里因为使用的是logging::trivial::severity 因此才可以直接使用BOOST_LOG_TRIVIAL</span><br>&lt;&lt; <span class="hljs-string">&quot;: &lt;&quot;</span> &lt;&lt; logging::trivial::severity<br>&lt;&lt; <span class="hljs-string">&quot;&gt; &quot;</span> &lt;&lt; expr::smessage<br>);<br><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">add_sink</span>(sink);<br>logging::<span class="hljs-built_in">add_common_attributes</span>();<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">lambdaFormatTest</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">initLambdaFormat</span>();<br><br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;in lambdaFormatTest&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(trace) &lt;&lt; <span class="hljs-string">&quot;A trace severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(debug) &lt;&lt; <span class="hljs-string">&quot;A debug severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;An informational severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(warning) &lt;&lt; <span class="hljs-string">&quot;A warning severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(error) &lt;&lt; <span class="hljs-string">&quot;An error severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(fatal) &lt;&lt; <span class="hljs-string">&quot;A fatal severity message&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initBoostFormat</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">typedef</span> sinks::synchronous_sink&lt; sinks::text_ostream_backend &gt; text_sink;<br>boost::shared_ptr&lt; text_sink &gt; sink = boost::<span class="hljs-built_in">make_shared</span>&lt; text_sink &gt;();<br><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">make_shared</span>&lt; std::ofstream &gt;(<span class="hljs-string">&quot;E:\\temp\\sample.log&quot;</span>));<br><span class="hljs-comment">// 这里同时把日志输出到控制台</span><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">shared_ptr</span>&lt;std::ostream&gt;(&amp;std::clog, boost::<span class="hljs-built_in">null_deleter</span>())<br>);<br><br>sink-&gt;<span class="hljs-built_in">set_formatter</span><br>(<br>expr::format(<span class="hljs-string">&quot;%1%: &lt;%2%&gt; %3%&quot;</span>)<br>% expr::<span class="hljs-built_in">attr</span>&lt;<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;LineID&quot;</span>)<br>% logging::trivial::severity<br>%expr::smessage<br>);<br><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">add_sink</span>(sink);<br>logging::<span class="hljs-built_in">add_common_attributes</span>();<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">boostFormatTest</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">initBoostFormat</span>();<br><br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;in boostFormatTest&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(trace) &lt;&lt; <span class="hljs-string">&quot;A trace severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(debug) &lt;&lt; <span class="hljs-string">&quot;A debug severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;An informational severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(warning) &lt;&lt; <span class="hljs-string">&quot;A warning severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(error) &lt;&lt; <span class="hljs-string">&quot;An error severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(fatal) &lt;&lt; <span class="hljs-string">&quot;A fatal severity message&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initSpecializedFormat</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">typedef</span> sinks::synchronous_sink&lt; sinks::text_ostream_backend &gt; text_sink;<br>boost::shared_ptr&lt; text_sink &gt; sink = boost::<span class="hljs-built_in">make_shared</span>&lt; text_sink &gt;();<br><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">make_shared</span>&lt; std::ofstream &gt;(<span class="hljs-string">&quot;E:\\temp\\sample.log&quot;</span>));<br><span class="hljs-comment">// 这里同时把日志输出到控制台</span><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">shared_ptr</span>&lt;std::ostream&gt;(&amp;std::clog, boost::<span class="hljs-built_in">null_deleter</span>())<br>);<br><br>sink-&gt;<span class="hljs-built_in">set_formatter</span><br>(<br>expr::stream<br>&lt;&lt; expr::format_date_time&lt; boost::posix_time::ptime &gt;(<span class="hljs-string">&quot;TimeStamp&quot;</span>, <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br>&lt;&lt; <span class="hljs-string">&quot;: &lt;&quot;</span> &lt;&lt; logging::trivial::severity<br>&lt;&lt; <span class="hljs-string">&quot;&gt; &quot;</span> &lt;&lt; expr::smessage<br>);<br><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">add_sink</span>(sink);<br>logging::<span class="hljs-built_in">add_common_attributes</span>();<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">specializedFormatTest</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">initSpecializedFormat</span>();<br><br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;in specializedFormatTest&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(trace) &lt;&lt; <span class="hljs-string">&quot;A trace severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(debug) &lt;&lt; <span class="hljs-string">&quot;A debug severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;An informational severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(warning) &lt;&lt; <span class="hljs-string">&quot;A warning severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(error) &lt;&lt; <span class="hljs-string">&quot;An error severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(fatal) &lt;&lt; <span class="hljs-string">&quot;A fatal severity message&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initStringFormat</span><span class="hljs-params">()</span> </span>&#123;<br>logging::<span class="hljs-built_in">add_file_log</span>(<br>keywords::file_name = <span class="hljs-string">&quot;E:\\temp\\sample.log&quot;</span>,<br>keywords::format = <span class="hljs-string">&quot;[%TimeStamp%]: %Message%&quot;</span><br>);<br>logging::<span class="hljs-built_in">add_console_log</span>(<br>std::clog,<br>keywords::format = <span class="hljs-string">&quot;[%TimeStamp%]: %Message%&quot;</span><br>);<br><br>logging::<span class="hljs-built_in">add_common_attributes</span>();<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stringFormatTest</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">initStringFormat</span>();<br><br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;in stringFormatTest&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(trace) &lt;&lt; <span class="hljs-string">&quot;A trace severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(debug) &lt;&lt; <span class="hljs-string">&quot;A debug severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;An informational severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(warning) &lt;&lt; <span class="hljs-string">&quot;A warning severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(error) &lt;&lt; <span class="hljs-string">&quot;An error severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(fatal) &lt;&lt; <span class="hljs-string">&quot;A fatal severity message&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_formatter</span><span class="hljs-params">(logging::record_view <span class="hljs-type">const</span>&amp; rec, logging::formatting_ostream&amp; strm)</span></span><br><span class="hljs-function"></span>&#123;<br>strm &lt;&lt; logging::<span class="hljs-built_in">extract</span>&lt; <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> &gt;(<span class="hljs-string">&quot;LineID&quot;</span>, rec) &lt;&lt; <span class="hljs-string">&quot;: &quot;</span>;<br>strm &lt;&lt; <span class="hljs-string">&quot;&lt;&quot;</span> &lt;&lt; rec[logging::trivial::severity] &lt;&lt; <span class="hljs-string">&quot;&gt; &quot;</span>;<br>strm &lt;&lt; rec[expr::smessage];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initCustomFormat</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">typedef</span> sinks::synchronous_sink&lt; sinks::text_ostream_backend &gt; text_sink;<br>boost::shared_ptr&lt; text_sink &gt; sink = boost::<span class="hljs-built_in">make_shared</span>&lt; text_sink &gt;();<br><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">make_shared</span>&lt; std::ofstream &gt;(<span class="hljs-string">&quot;E:\\temp\\sample.log&quot;</span>));<br><span class="hljs-comment">// 这里同时把日志输出到控制台</span><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">shared_ptr</span>&lt;std::ostream&gt;(&amp;std::clog, boost::<span class="hljs-built_in">null_deleter</span>())<br>);<br><br>sink-&gt;<span class="hljs-built_in">set_formatter</span>(&amp;my_formatter);<br><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">add_sink</span>(sink);<br>logging::<span class="hljs-built_in">add_common_attributes</span>();<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">customFormatTest</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">initCustomFormat</span>();<br><br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;in customFormatTest&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(trace) &lt;&lt; <span class="hljs-string">&quot;A trace severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(debug) &lt;&lt; <span class="hljs-string">&quot;A debug severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;An informational severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(warning) &lt;&lt; <span class="hljs-string">&quot;A warning severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(error) &lt;&lt; <span class="hljs-string">&quot;An error severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(fatal) &lt;&lt; <span class="hljs-string">&quot;A fatal severity message&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span>*[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//// lambda foramt 测试</span><br><span class="hljs-comment">//lambdaFormatTest();</span><br><span class="hljs-comment">//// boost format 测试</span><br><span class="hljs-comment">//boostFormatTest();</span><br><span class="hljs-comment">//// specialized format 测试</span><br><span class="hljs-comment">//specializedFormatTest();</span><br><span class="hljs-comment">//// string format 测试</span><br><span class="hljs-comment">//stringFormatTest();</span><br><span class="hljs-comment">// custom format 测试</span><br><span class="hljs-built_in">customFormatTest</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-复杂日志过滤"><a href="#7-复杂日志过滤" class="headerlink" title="7. 复杂日志过滤"></a>7. 复杂日志过滤</h2><p>日志过滤这部分比较简单，就直接上源码了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/smart_ptr/shared_ptr.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/smart_ptr/make_shared_object.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/phoenix/bind.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/date_time/posix_time/posix_time.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/core.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/expressions.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/attributes.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/basic_logger.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/severity_logger.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/severity_channel_logger.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/record_ostream.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sinks/sync_frontend.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sinks/text_ostream_backend.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/attributes/scoped_attribute.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/value_ref.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/common_attributes.hpp&gt;</span></span><br><br><br><span class="hljs-keyword">namespace</span> logging = boost::log;<br><span class="hljs-keyword">namespace</span> src = boost::log::sources;<br><span class="hljs-keyword">namespace</span> expr = boost::log::expressions;<br><span class="hljs-keyword">namespace</span> sinks = boost::log::sinks;<br><span class="hljs-keyword">namespace</span> attrs = boost::log::attributes;<br><span class="hljs-keyword">namespace</span> keywords = boost::log::keywords;<br><br><br><span class="hljs-comment">//自定义严重等级</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">severity_level</span><br>&#123;<br>normal,<br>notification,<br>warning,<br>error,<br>critical<br>&#125;;<br><br><br><span class="hljs-comment">//重载&lt;&lt;运算符将严重等级插入流中</span><br>std::ostream&amp; <span class="hljs-keyword">operator</span>&lt;&lt; (std::ostream&amp; strm, severity_level level)<br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span>* strings[] =<br>&#123;<br><span class="hljs-string">&quot;normal&quot;</span>,<br><span class="hljs-string">&quot;notification&quot;</span>,<br><span class="hljs-string">&quot;warning&quot;</span>,<br><span class="hljs-string">&quot;error&quot;</span>,<br><span class="hljs-string">&quot;critical&quot;</span><br>&#125;;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">static_cast</span>&lt;std::<span class="hljs-type">size_t</span>&gt;(level) &lt; <span class="hljs-built_in">sizeof</span>(strings) / <span class="hljs-built_in">sizeof</span>(*strings))<br>strm &lt;&lt; strings[level];<br><span class="hljs-keyword">else</span><br>strm &lt;&lt; <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(level);<br><br><span class="hljs-keyword">return</span> strm;<br>&#125;<br><br><br><span class="hljs-comment">//定义属性关键字</span><br><span class="hljs-built_in">BOOST_LOG_ATTRIBUTE_KEYWORD</span>(line_id, <span class="hljs-string">&quot;LineID&quot;</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<br><span class="hljs-built_in">BOOST_LOG_ATTRIBUTE_KEYWORD</span>(severity, <span class="hljs-string">&quot;Severity&quot;</span>, severity_level)<br><span class="hljs-built_in">BOOST_LOG_ATTRIBUTE_KEYWORD</span>(tag_attr, <span class="hljs-string">&quot;Tag&quot;</span>, std::string)<br><br><span class="hljs-comment">//自定义过滤函数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">my_filter</span><span class="hljs-params">(logging::value_ref&lt; severity_level, tag::severity &gt; <span class="hljs-type">const</span>&amp; level,</span></span><br><span class="hljs-params"><span class="hljs-function">logging::value_ref&lt; std::string, tag::tag_attr &gt; <span class="hljs-type">const</span>&amp; tag)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> level &gt;= warning || tag == <span class="hljs-string">&quot;IMPORTANT_MESSAGE&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//为所有槽设置公共的格式化器</span><br>logging::formatter fmt1 = expr::stream<br>&lt;&lt; <span class="hljs-string">&quot;fmt1: &quot;</span><br>&lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; line_id &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>&lt;&lt; <span class="hljs-string">&quot;: &lt;&quot;</span> &lt;&lt; severity &lt;&lt; <span class="hljs-string">&quot;&gt;\t&quot;</span><br>&lt;&lt; expr::if_(expr::<span class="hljs-built_in">has_attr</span>(tag_attr))<br>[<br>expr::stream &lt;&lt; <span class="hljs-string">&quot;[&quot;</span> &lt;&lt; tag_attr &lt;&lt; <span class="hljs-string">&quot;] &quot;</span><br>]<br>&lt;&lt; expr::smessage;<br><br>logging::formatter fmt2 = expr::stream<br>&lt;&lt; <span class="hljs-string">&quot;fmt2: &quot;</span><br>&lt;&lt; std::<span class="hljs-built_in">setw</span>(<span class="hljs-number">6</span>) &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; line_id &lt;&lt; std::<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>&lt;&lt; <span class="hljs-string">&quot;: &lt;&quot;</span> &lt;&lt; severity &lt;&lt; <span class="hljs-string">&quot;&gt;\t&quot;</span><br>&lt;&lt; expr::if_(expr::<span class="hljs-built_in">has_attr</span>(tag_attr))<br>[<br>expr::stream &lt;&lt; <span class="hljs-string">&quot;[&quot;</span> &lt;&lt; tag_attr &lt;&lt; <span class="hljs-string">&quot;] &quot;</span><br>]<br>&lt;&lt; expr::smessage;<br><br><span class="hljs-comment">//初始化槽</span><br><span class="hljs-keyword">typedef</span> sinks::synchronous_sink&lt; sinks::text_ostream_backend &gt; text_sink;<br>boost::shared_ptr&lt; text_sink &gt; sink = boost::<span class="hljs-built_in">make_shared</span>&lt; text_sink &gt;();<br><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">make_shared</span>&lt; std::ofstream &gt;(<span class="hljs-string">&quot;E:\\temp\\full.log&quot;</span>));<br><br>sink-&gt;<span class="hljs-built_in">set_formatter</span>(fmt1);<br><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">add_sink</span>(sink);<br><br>sink = boost::<span class="hljs-built_in">make_shared</span>&lt; text_sink &gt;();<br><br>sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">make_shared</span>&lt; std::ofstream &gt;(<span class="hljs-string">&quot;E:\\temp\\important.log&quot;</span>));<br><br><span class="hljs-comment">//sink-&gt;locked_backend()-&gt;auto_flush(true); // 加上这一句之后 每出现一条重要信息后 都会flush一次</span><br><br>sink-&gt;<span class="hljs-built_in">set_formatter</span>(fmt2);<br><br><span class="hljs-comment">//sink-&gt;set_filter(severity &gt;= warning || (expr::has_attr(tag_attr) &amp;&amp; tag_attr == &quot;IMPORTANT_MESSAGE&quot;));</span><br><span class="hljs-keyword">namespace</span> phoenix = boost::phoenix;<br>sink-&gt;<span class="hljs-built_in">set_filter</span>(phoenix::<span class="hljs-built_in">bind</span>(&amp;my_filter, severity.<span class="hljs-built_in">or_none</span>(), tag_attr.<span class="hljs-built_in">or_none</span>()));<br><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">add_sink</span>(sink);<br><br><span class="hljs-comment">//添加常用属性</span><br>logging::<span class="hljs-built_in">add_common_attributes</span>();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">logging_function</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>src::severity_logger&lt; severity_level &gt; slg;<br><br><span class="hljs-built_in">BOOST_LOG_SEV</span>(slg, normal) &lt;&lt; <span class="hljs-string">&quot;常规消息&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_SEV</span>(slg, warning) &lt;&lt; <span class="hljs-string">&quot;警告消息&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_SEV</span>(slg, critical) &lt;&lt; <span class="hljs-string">&quot;致命错误消息&quot;</span>;<br><br>&#123;<br><span class="hljs-built_in">BOOST_LOG_SCOPED_THREAD_TAG</span>(<span class="hljs-string">&quot;Tag&quot;</span>, <span class="hljs-string">&quot;IMPORTANT_MESSAGE&quot;</span>);<br><span class="hljs-built_in">BOOST_LOG_SEV</span>(slg, normal) &lt;&lt; <span class="hljs-string">&quot;重要消息&quot;</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span>*[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init</span>();<br><br><span class="hljs-built_in">logging_function</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>有几个点还是需要注意下的</p><ol><li>可以对不同的日志文件使用不同的输出格式</li><li>可以对不同的日志文件使用不同的过滤器</li><li>可以通过打标签的方式控制不同的日志流向</li></ol><p>过滤的存在使得日志可以有更多灵活的处理方式</p><h2 id="8-宽字节日志"><a href="#8-宽字节日志" class="headerlink" title="8. 宽字节日志"></a>8. 宽字节日志</h2><p>主要就是牵扯到不同的操作系统、软件打开日志时使用的阅读格式可能时不同的，为了应对这一点，sink在后端加了一个字符转换的功能</p><p>这里直接贴视频里的代码吧~</p><p>示例源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/locale/generator.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/date_time/posix_time/posix_time_types.hpp&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/common.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/expressions.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/file.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/console.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/common_attributes.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sources/logger.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/support/date_time.hpp&gt;</span></span><br><br><br><span class="hljs-keyword">namespace</span> logging = boost::log;<br><span class="hljs-keyword">namespace</span> sinks = boost::log::sinks;<br><span class="hljs-keyword">namespace</span> attrs = boost::log::attributes;<br><span class="hljs-keyword">namespace</span> src = boost::log::sources;<br><span class="hljs-keyword">namespace</span> expr = boost::log::expressions;<br><span class="hljs-keyword">namespace</span> keywords = boost::log::keywords;<br><br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">severity_level</span><br>&#123;<br>normal,<br>notification,<br>warning,<br>error,<br>critical<br>&#125;;<br><br><br><span class="hljs-keyword">template</span>&lt; <span class="hljs-keyword">typename</span> CharT, <span class="hljs-keyword">typename</span> TraitsT &gt;<br><span class="hljs-keyword">inline</span> std::basic_ostream&lt; CharT, TraitsT &gt;&amp; <span class="hljs-keyword">operator</span>&lt;&lt; (<br>std::basic_ostream&lt; CharT, TraitsT &gt;&amp; strm, severity_level lvl)<br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-type">const</span> str[] =<br>&#123;<br><span class="hljs-string">&quot;normal&quot;</span>,<br><span class="hljs-string">&quot;notification&quot;</span>,<br><span class="hljs-string">&quot;warning&quot;</span>,<br><span class="hljs-string">&quot;error&quot;</span>,<br><span class="hljs-string">&quot;critical&quot;</span><br>&#125;;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">static_cast</span>&lt;std::<span class="hljs-type">size_t</span>&gt;(lvl) &lt; (<span class="hljs-built_in">sizeof</span>(str) / <span class="hljs-built_in">sizeof</span>(*str)))<br>strm &lt;&lt; str[lvl];<br><span class="hljs-keyword">else</span><br>strm &lt;&lt; <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(lvl);<br><span class="hljs-keyword">return</span> strm;<br>&#125;<br><br><br><span class="hljs-built_in">BOOST_LOG_ATTRIBUTE_KEYWORD</span>(severity, <span class="hljs-string">&quot;Severity&quot;</span>, severity_level)<br><span class="hljs-built_in">BOOST_LOG_ATTRIBUTE_KEYWORD</span>(timestamp, <span class="hljs-string">&quot;TimeStamp&quot;</span>, boost::posix_time::ptime)<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init_logging</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>boost::shared_ptr&lt; sinks::synchronous_sink&lt; sinks::text_file_backend &gt; &gt; sink = logging::<span class="hljs-built_in">add_file_log</span><br>(<br><span class="hljs-string">&quot;sample.log&quot;</span>,<br>keywords::format = expr::stream<br>&lt;&lt; expr::format_date_time(timestamp, <span class="hljs-string">&quot;%Y-%m-%d, %H:%M:%S.%f&quot;</span>)<br>&lt;&lt; <span class="hljs-string">&quot; &lt;&quot;</span> &lt;&lt; severity.<span class="hljs-built_in">or_default</span>(normal)<br>&lt;&lt; <span class="hljs-string">&quot;&gt; &quot;</span> &lt;&lt; expr::message<br>);<br><br>std::locale loc = boost::locale::<span class="hljs-built_in">generator</span>()(<span class="hljs-string">&quot;en_US.UTF-8&quot;</span>);<br>sink-&gt;<span class="hljs-built_in">imbue</span>(loc);<br><br>logging::<span class="hljs-built_in">add_common_attributes</span>();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_narrow_char_logging</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>src::logger lg;<br><span class="hljs-built_in">BOOST_LOG</span>(lg) &lt;&lt; <span class="hljs-string">&quot;Narrow character message&quot;</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_wide_char_logging</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>src::wlogger lg;<br><span class="hljs-built_in">BOOST_LOG</span>(lg) &lt;&lt; <span class="hljs-string">L&quot;Wide character message&quot;</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">wchar_t</span> chinese_chars[] = &#123; <span class="hljs-number">0x5BBD</span>, <span class="hljs-number">0x5B57</span>, <span class="hljs-number">0x7B26</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-built_in">BOOST_LOG</span>(lg) &lt;&lt; chinese_chars;<br><br>src::wseverity_logger&lt; severity_level &gt; slg;<br><span class="hljs-built_in">BOOST_LOG_SEV</span>(slg, normal) &lt;&lt; <span class="hljs-string">L&quot;A normal severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_SEV</span>(slg, warning) &lt;&lt; <span class="hljs-string">L&quot;A warning severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_SEV</span>(slg, error) &lt;&lt; <span class="hljs-string">L&quot;An error severity message&quot;</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init_logging</span>();<br><span class="hljs-built_in">test_narrow_char_logging</span>();<br><span class="hljs-built_in">test_wide_char_logging</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-通过网络发送日志"><a href="#9-通过网络发送日志" class="headerlink" title="9. 通过网络发送日志"></a>9. 通过网络发送日志</h2><p>这一部分可能有些人会用到<del>（你说的有些人不会是你自己吧）</del></p><p>这里的话主要是用到了一个syslog_backend，其实使用的话也比较简单，官方的已经给出了使用样例(&lt;boost源码目录&gt;&#x2F;libs&#x2F;log&#x2F;example&#x2F;syslog)</p><p>因此这里的话就贴一下我自己的一个代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/core/null_deleter.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/smart_ptr/shared_ptr.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/smart_ptr/make_shared_object.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/core.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/trivial.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/expressions.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sinks/sync_frontend.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sinks/text_ostream_backend.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/sinks/syslog_backend.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/support/date_time.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/file.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/console.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/log/utility/setup/common_attributes.hpp&gt;</span></span><br><br><br><span class="hljs-keyword">namespace</span> logging = boost::log;<br><span class="hljs-keyword">namespace</span> src = boost::log::sources;<br><span class="hljs-keyword">namespace</span> expr = boost::log::expressions;<br><span class="hljs-keyword">namespace</span> sinks = boost::log::sinks;<br><span class="hljs-keyword">namespace</span> keywords = boost::log::keywords;<br><span class="hljs-keyword">namespace</span> attrs = boost::log::attributes;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// ======================================================</span><br><span class="hljs-comment">// 创建文本输出槽</span><br><span class="hljs-keyword">typedef</span> sinks::synchronous_sink&lt;sinks::text_ostream_backend&gt; text_sink;<br>boost::shared_ptr&lt;text_sink&gt; local_sink = boost::<span class="hljs-built_in">make_shared</span>&lt;text_sink&gt;();<br><span class="hljs-comment">// 添加写文件的流</span><br>local_sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(<br>boost::<span class="hljs-built_in">make_shared</span>&lt; std::ofstream &gt;(<span class="hljs-string">&quot;E:\\temp\\sample.log&quot;</span>));<br>local_sink-&gt;<span class="hljs-built_in">set_formatter</span><br>(<br>expr::stream<br>&lt;&lt; <span class="hljs-string">&quot;[&quot;</span> &lt;&lt; expr::format_date_time&lt; boost::posix_time::ptime &gt;(<span class="hljs-string">&quot;TimeStamp&quot;</span>, <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>) &lt;&lt; <span class="hljs-string">&quot;]&quot;</span><br>&lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; logging::trivial::severity &lt;&lt; <span class="hljs-string">&quot;) : &quot;</span><br>&lt;&lt; expr::message<br>);<br><span class="hljs-comment">// 同时添加输出到屏幕</span><br>local_sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">add_stream</span>(boost::<span class="hljs-built_in">shared_ptr</span>&lt;std::ostream&gt;(&amp;std::clog, boost::<span class="hljs-built_in">null_deleter</span>()));<br><span class="hljs-comment">// 把输出槽注册到日志库核心</span><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">add_sink</span>(local_sink);<br><span class="hljs-comment">// ======================================================</span><br><span class="hljs-comment">// 创建网络输出槽</span><br><span class="hljs-keyword">typedef</span> sinks::synchronous_sink&lt;sinks::syslog_backend&gt; net_sink;<br>boost::shared_ptr&lt;net_sink&gt; remote_sink = boost::<span class="hljs-built_in">make_shared</span>&lt;net_sink&gt;();<br><br>remote_sink-&gt;<span class="hljs-built_in">set_formatter</span><br>(<br>expr::stream<br>&lt;&lt; <span class="hljs-string">&quot;[&quot;</span> &lt;&lt; expr::format_date_time&lt; boost::posix_time::ptime &gt;(<span class="hljs-string">&quot;TimeStamp&quot;</span>, <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>) &lt;&lt; <span class="hljs-string">&quot;]&quot;</span><br>&lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; logging::trivial::severity &lt;&lt; <span class="hljs-string">&quot;) : &quot;</span><br>&lt;&lt; expr::message<br>);<br><br>remote_sink-&gt;<span class="hljs-built_in">locked_backend</span>()-&gt;<span class="hljs-built_in">set_target_address</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">1024</span>); <span class="hljs-comment">// 这个地方的端口的话  可以参数化定义</span><br><span class="hljs-comment">// 只把trace级别的信息进行发送</span><br>remote_sink-&gt;<span class="hljs-built_in">set_filter</span>(logging::trivial::severity == logging::trivial::severity_level::trace);<br><br><span class="hljs-comment">// 把输出槽注册到日志库核心</span><br>logging::core::<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">add_sink</span>(remote_sink);<br><span class="hljs-comment">// ======================================================</span><br><span class="hljs-comment">// 添加常用属性</span><br>logging::<span class="hljs-built_in">add_common_attributes</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(trace) &lt;&lt; <span class="hljs-string">&quot;A trace severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(debug) &lt;&lt; <span class="hljs-string">&quot;A debug severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(info) &lt;&lt; <span class="hljs-string">&quot;An informational severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(warning) &lt;&lt; <span class="hljs-string">&quot;A warning severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(error) &lt;&lt; <span class="hljs-string">&quot;An error severity message&quot;</span>;<br><span class="hljs-built_in">BOOST_LOG_TRIVIAL</span>(fatal) &lt;&lt; <span class="hljs-string">&quot;A fatal severity message&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>除此之外贴一个服务器端代码，方便做测试，这部分有参考<a href="https://www.jianshu.com/p/5de8ee17a30e">文章</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;boost/asio.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio::ip;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> boost::asio::ip;<br><span class="hljs-keyword">try</span><br>&#123;<br>boost::asio::io_service io; <span class="hljs-comment">//构造IO服务,由于非异步,无需run</span><br><br><span class="hljs-function">udp::socket <span class="hljs-title">socket</span><span class="hljs-params">(io, udp::endpoint(udp::v4(), <span class="hljs-number">1024</span>))</span></span>;<span class="hljs-comment">//构造socket并绑定到1024端口</span><br><br>std::cout &lt;&lt; <span class="hljs-string">&quot;bind to port 1024, begin receive message...\n&quot;</span>;<br><span class="hljs-keyword">for</span> (;;)<br>&#123;<br>std::array&lt;<span class="hljs-type">char</span>, 1024&gt; recv_buf;<span class="hljs-comment">//接收缓冲</span><br>udp::endpoint remote_endpoint; <span class="hljs-comment">//发送端信息</span><br>boost::system::error_code error;<br><br><span class="hljs-comment">//阻塞读取</span><br><span class="hljs-keyword">auto</span> size = socket.<span class="hljs-built_in">receive_from</span>(boost::asio::<span class="hljs-built_in">buffer</span>(recv_buf), remote_endpoint, <span class="hljs-number">0</span>, error);<br><br><span class="hljs-keyword">if</span> (error &amp;&amp; error != boost::asio::error::message_size)<br>&#123;<br><span class="hljs-keyword">throw</span> boost::system::<span class="hljs-built_in">system_error</span>(error);<br>&#125;<br>std::cout.<span class="hljs-built_in">write</span>(recv_buf.<span class="hljs-built_in">data</span>(), size);<span class="hljs-comment">//输出结果</span><br>std::cout &lt;&lt; std::endl;<br>&#125;<br>&#125;<br><span class="hljs-built_in">catch</span> (std::exception&amp; e)<br>&#123;<br>std::cerr &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; std::endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>至此笔记全部完成，总的来说，Boost.log这个库是真的强大，基本上所有你能想到的功能都可以轻松地实现，入门的话感觉并不是很复杂，但是想要玩儿地花的话，还得多看api了，最后十分感谢“编程小强”的讲解<a href="https://study.163.com/course/courseMain.htm?courseId=1209582814">视频</a></p><p>此外，根据<a href="https://zhongpan.tech/2019/07/04/010-cpp-logging-framework-benchmark/">文章</a>的测试可以看到，spdlog的效率好像更高一些，spdlog我也有尝试着用了一下，感觉也还是挺不错的，后面可能会再学习下这个东西。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>error Boost.Log &quot;RTTI is required by the ibrary&quot; 问题解决</title>
    <link href="/2022/04/19/error-Boost-Log-RTTI-is-required-by-the-library-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/04/19/error-Boost-Log-RTTI-is-required-by-the-library-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>今天在VS项目中使用Boost.log时遇到了这个问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">error Boost.Log: RTTI is required by the library<br></code></pre></td></tr></table></figure><p>这里的话通过一步步的debug找到，boost&#x2F;config&#x2F;compiler&#x2F;visualc.hpp文件中，存在着以下的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined(_CPPRTTI) &amp;&amp; !defined(BOOST_NO_RTTI)</span><br><span class="hljs-meta">#  <span class="hljs-keyword">define</span> BOOST_NO_RTTI</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>这一部分会检测系统中是否开启了_CPPRTTI，如果没有的话则定义一个BOOST_NO_RTTI，导致后面在boost&#x2F;log&#x2F;detail&#x2F;config.hpp文件中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// The library requires dynamic_cast in a few places</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(BOOST_NO_RTTI)</span><br><span class="hljs-meta">#   <span class="hljs-keyword">error</span> Boost.Log: RTTI is required by the library</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>出现了改编译错误</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>通过搜索发现，需要开启系统编译的&#x2F;GR选项，具体开启方式为(VS)：<br>项目属性 -&gt; C&#x2F;C++ -&gt; 语言 -&gt; 启用运行时类型信息”是(&#x2F;GR)”<br>问题解决</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
